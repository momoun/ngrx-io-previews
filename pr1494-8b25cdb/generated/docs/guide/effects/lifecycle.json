{
  "id": "guide/effects/lifecycle",
  "title": "Lifecycle",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/lifecycle.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"lifecycle\">Lifecycle<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#lifecycle\"><i class=\"material-icons\">link</i></a></h1>\n<h3 id=\"root_effects_init\">ROOT_EFFECTS_INIT<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#root_effects_init\"><i class=\"material-icons\">link</i></a></h3>\n<p>After all the root effects have been added, the root effect dispatches a <code><a href=\"api/effects/ROOT_EFFECTS_INIT\" class=\"code-anchor\">ROOT_EFFECTS_INIT</a></code> action.\nYou can see this action as a lifecycle hook, which you can use in order to execute some code after all your root effects have been added.</p>\n<code-example language=\"ts\">\n@<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\ninit$ = this.actions$.pipe(\n  <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>(<a href=\"api/effects/ROOT_EFFECTS_INIT\" class=\"code-anchor\">ROOT_EFFECTS_INIT</a>),\n  map(action => ...)\n);\n</code-example>\n<h3 id=\"update_effects\">UPDATE_EFFECTS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#update_effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>After feature effects are registered, an <code>UPDATE_EFFECTS</code> action is dispatched.</p>\n<code-example language=\"ts\">\n<a href=\"api/store/Action#type\" class=\"code-anchor\">type</a> UpdateEffects = {\n  <a href=\"api/store/Action#type\" class=\"code-anchor\">type</a>: typeof UPDATE_EFFECTS;\n  effects: string[];\n};\n</code-example>\n<p>For example, when you register your feature module as <code>EffectsModule.forFeature([SomeEffectsClass, AnotherEffectsClass])</code>,\nit has <code>SomeEffectsClass</code> and <code>AnotherEffectsClass</code> in an array as its payload.</p>\n<p>To dispatch an action when the <code>SomeEffectsClass</code> effect has been registered, listen to the <code>UPDATE_EFFECTS</code> action and use the <code>effects</code> payload to filter out non-important effects.</p>\n<code-example language=\"ts\">\n@<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\ninit = this.actions.pipe(\n  <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>&#x3C;UpdateEffects>(UPDATE_EFFECTS)\n  filter(action => action.effects.includes('SomeEffectsClass')),\n  map(action => ...)\n);\n</code-example>\n<h3 id=\"non-dispatching-effects\">Non-dispatching Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#non-dispatching-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>Pass <code>{ dispatch: false }</code> to the decorator to prevent dispatching.</p>\n<p>Sometimes you don't want effects to dispatch an action, for example when you only want to log or navigate. But when an effect does not dispatch another action, the browser will crash because the effect is both 'subscribing' to and 'dispatching' the exact same action, causing an infinite loop. To prevent this, add { dispatch: false } to the decorator.</p>\n<p>Usage:</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a> } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SomeEffectsClass {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>({ dispatch: false })\n  logActions$ = this.actions$.pipe(tap(action => console.log(action)));\n}\n</code-example>\n<h3 id=\"initializing-effect\">Initializing effect<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#initializing-effect\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can execute some code that will be executed directly after the effect class is loaded.</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a> } from '@ngrx/effects';\nimport { defer } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SomeEffectsClass {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>({ dispatch: false })\n  init$: Observable&#x3C;any> = defer(() => of(null)).pipe(\n    tap(() => console.log('init$'))\n  );\n}\n</code-example>\n<p>If you want to trigger another action, be careful to add this effect at the end.</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a> } from '@ngrx/effects';\nimport { defer } from 'rxjs';\nimport { LoginAction, LogoutAction } from './auth.actions';\n\n@Injectable()\nexport class SomeEffectsClass {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>({ dispatch: false })\n  authActions$ = this.actions$.pipe(\n    <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>&#x3C;LoginAction | LogoutAction>('LOGIN', 'LOGOUT'),\n    tap(action => console.log(action))\n  );\n\n  // Should be your last <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\n  init$: Observable&#x3C;action> = defer(() => {\n    return of(new LogoutAction());\n  });\n}\n</code-example>\n<h2 id=\"controlling-effects\">Controlling Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#controlling-effects\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"onruneffects\">OnRunEffects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#onruneffects\"><i class=\"material-icons\">link</i></a></h3>\n<p>By default, effects are merged and subscribed to the store. Implement the <code><a href=\"api/effects/OnRunEffects\" class=\"code-anchor\">OnRunEffects</a></code> interface to control the lifecycle of the resolved effects.</p>\n<p>Usage:</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport {\n  <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>,\n  <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>,\n  <a href=\"api/effects/OnRunEffects\" class=\"code-anchor\">OnRunEffects</a>,\n  <a href=\"api/effects/EffectNotification\" class=\"code-anchor\">EffectNotification</a>,\n  <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>,\n} from '@ngrx/effects';\nimport { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { exhaustMap, takeUntil, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UserEffects implements <a href=\"api/effects/OnRunEffects\" class=\"code-anchor\">OnRunEffects</a> {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\n  updateUser$: Observable&#x3C;<a href=\"api/store/Action\" class=\"code-anchor\">Action</a>> = this.actions$.pipe(\n    <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>('UPDATE_USER'),\n    tap(action => {\n      console.log(action);\n    })\n  );\n\n  <a href=\"api/effects/OnRunEffects#ngrxOnRunEffects\" class=\"code-anchor\">ngrxOnRunEffects</a>(resolvedEffects$: Observable&#x3C;<a href=\"api/effects/EffectNotification\" class=\"code-anchor\">EffectNotification</a>>) {\n    return this.actions$.pipe(\n      <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>('LOGGED_IN'),\n      exhaustMap(() =>\n        resolvedEffects$.pipe(\n          takeUntil(this.actions$.pipe(<a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>('LOGGED_OUT')))\n        )\n      )\n    );\n  }\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/effects/Actions\n - api/effects/Effect\n - api/effects/EffectNotification\n - api/effects/EffectNotification#effect\n - api/effects/OnRunEffects\n - api/effects/OnRunEffects#ngrxOnRunEffects\n - api/effects/ROOT_EFFECTS_INIT\n - api/effects/ofType\n - api/store/Action\n - api/store/Action#type\n - guide/effects/lifecycle#controlling-effects\n - guide/effects/lifecycle#initializing-effect\n - guide/effects/lifecycle#lifecycle\n - guide/effects/lifecycle#non-dispatching-effects\n - guide/effects/lifecycle#onruneffects\n - guide/effects/lifecycle#root_effects_init\n - guide/effects/lifecycle#update_effects\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/lifecycle.md?message=docs%3A%20describe%20your%20change...\n-->"
}