{
  "id": "guide/entity/adapter",
  "title": "Entity Adapter",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/entity/adapter.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entity-adapter\">Entity Adapter<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity/adapter#entity-adapter\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"createentityadaptert\">createEntityAdapter&#x3C;T><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity/adapter#createentityadaptert\"><i class=\"material-icons\">link</i></a></h2>\n<p>A method for returning a generic entity adapter for a single entity state collection. The\nreturned adapter provides many adapter methods for performing operations\nagainst the collection type. The method takes an object with 2 properties for configuration.</p>\n<ul>\n<li><code>selectId</code>: A <code><a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a></code> for selecting the primary id for the collection. Optional when the entity has a primary key of <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code></li>\n<li><code>sortComparer</code>: A compare function used to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">sort</a> the collection. The comparer function is only needed if the collection needs to be sorted before being displayed. Set to <code>false</code> to leave the collection unsorted, which is more performant during CRUD operations.</li>\n</ul>\n<p>Usage:</p>\n<code-example header=\"user.reducer.ts\">\nimport { <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a>, <a href=\"api/entity/EntityAdapter\" class=\"code-anchor\">EntityAdapter</a>, <a href=\"api/entity/createEntityAdapter\" class=\"code-anchor\">createEntityAdapter</a> } from '@ngrx/entity';\n\nexport interface User {\n  <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: string;\n  name: string;\n}\n\nexport interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> extends <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a><user> {\n  // additional entities state properties\n  selectedUserId: number;\n}\n\nexport function selectUserId(a: User): string {\n  //In this case this would be optional since primary key is id\n  return a.id;\n}\n\nexport function sortByName(a: User, b: User): number {\n  return a.name.localeCompare(b.name);\n}\n\nexport const adapter: EntityAdapter<user> = createEntityAdapter<user>({\n  selectId: selectUserId,\n  sortComparer: sortByName,\n});\n</user></user></user></code-example>\n<h2 id=\"adapter-methods\">Adapter Methods<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity/adapter#adapter-methods\"><i class=\"material-icons\">link</i></a></h2>\n<p>These methods are provided by the adapter object returned\nwhen using createEntityAdapter. The methods are used inside your reducer function to manage\nthe entity collection based on your provided actions.</p>\n<h3 id=\"getinitialstate\">getInitialState<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity/adapter#getinitialstate\"><i class=\"material-icons\">link</i></a></h3>\n<p>Returns the <code>initialState</code> for entity state based on the provided type. Additional state is also provided through the provided configuration object. The initialState is provided to your reducer function.</p>\n<p>Usage:</p>\n<code-example header=\"user.reducer.ts\">\nimport { <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a>, <a href=\"api/entity/EntityAdapter\" class=\"code-anchor\">EntityAdapter</a>, <a href=\"api/entity/createEntityAdapter\" class=\"code-anchor\">createEntityAdapter</a> } from '@ngrx/entity';\n\nexport interface User {\n  <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: string;\n  name: string;\n}\n\nexport interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> extends <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a><user> {\n  // additional entities state properties\n  selectedUserId: number | null;\n}\n\nexport const initialState: State = adapter.getInitialState({\n  // additional entity state properties\n  selectedUserId: null,\n});\n\nexport const reducer = createReducer(initialState);\n</user></code-example>\n<h2 id=\"adapter-collection-methods\">Adapter Collection Methods<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity/adapter#adapter-collection-methods\"><i class=\"material-icons\">link</i></a></h2>\n<p>The entity adapter also provides methods for operations against an entity. These methods can change\none to many records at a time. Each method returns the newly modified state if changes were made and the same\nstate if no changes were made.</p>\n<ul>\n<li><code>addOne</code>: Add one entity to the collection</li>\n<li><code>addMany</code>: Add multiple entities to the collection</li>\n<li><code>addAll</code>: Replace current collection with provided collection</li>\n<li><code>removeOne</code>: Remove one entity from the collection</li>\n<li><code>removeMany</code>: Remove multiple entities from the collection, by id or by predicate</li>\n<li><code>removeAll</code>: Clear entity collection</li>\n<li><code>updateOne</code>: Update one entity in the collection</li>\n<li><code>updateMany</code>: Update multiple entities in the collection</li>\n<li><code>upsertOne</code>: Add or Update one entity in the collection</li>\n<li><code>upsertMany</code>: Add or Update multiple entities in the collection</li>\n<li><code>map</code>: Update multiple entities in the collection by defining a map function, similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.map</a></li>\n</ul>\n<p>Usage:</p>\n<code-example header=\"user.model.ts\">\nexport interface User {\n  <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: string;\n  name: string;\n}\n</code-example>\n<code-example header=\"user.actions.ts\">\nimport { <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>, <a href=\"api/store/props\" class=\"code-anchor\">props</a> } from '@ngrx/store';\nimport { <a href=\"api/entity/Update\" class=\"code-anchor\">Update</a> } from '@ngrx/entity';\n\nimport { User } from '../models/user.model';\n\nexport const loadUsers = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>('[User/API] Load Users', <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ users: User[] }>());\nexport const addUser = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>('[User/API] <a href=\"api/data/ChangeSetOperation#Add\" class=\"code-anchor\">Add</a> User', <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ user: User }>());\nexport const upsertUser = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>('[User/API] <a href=\"api/data/ChangeSetOperation#Upsert\" class=\"code-anchor\">Upsert</a> User', <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ user: User }>());\nexport const addUsers = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>('[User/API] <a href=\"api/data/ChangeSetOperation#Add\" class=\"code-anchor\">Add</a> Users', <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ users: User }>());\nexport const upsertUsers = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>('[User/API] <a href=\"api/data/ChangeSetOperation#Upsert\" class=\"code-anchor\">Upsert</a> Users', <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ users: User[] }>());\nexport const updateUser = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>('[User/API] <a href=\"api/entity/Update\" class=\"code-anchor\">Update</a> User', <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ user: <a href=\"api/entity/Update\" class=\"code-anchor\">Update</a><user> }>());\nexport const updateUsers = createAction('[User/API] Update Users', props&#x3C;{ users: Update<user>[] }>());\nexport const mapUsers = createAction('[User/API] Map Users', props&#x3C;{ entityMap: EntityMap<user> }>());\nexport const deleteUser = createAction('[User/API] Delete User', props&#x3C;{ id: string }>());\nexport const deleteUsers = createAction('[User/API] Delete Users', props&#x3C;{ ids: string[] }>());\nexport const deleteUsersByPredicate = createAction('[User/API] Delete Users By Predicate', props&#x3C;{ predicate: Predicate<user> }>());\nexport const clearUsers = createAction('[User/API] Clear Users');\n\n</user></user></user></user></code-example>\n<code-example header=\"user.reducer.ts\">\nimport { <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a>, <a href=\"api/entity/EntityAdapter\" class=\"code-anchor\">EntityAdapter</a>, <a href=\"api/entity/createEntityAdapter\" class=\"code-anchor\">createEntityAdapter</a> } from '@ngrx/entity';\nimport { User } from '../models/user.model';\nimport * as UserActions from '../actions/user.actions';\n\nexport interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> extends <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a><user> {\n  // additional entities state properties\n  selectedUserId: number | null;\n}\n\nexport const adapter: EntityAdapter<user> = createEntityAdapter<user>();\n\nexport const initialState: State = adapter.getInitialState({\n  // additional entity state properties\n  selectedUserId: null,\n});\n\nexport const reducer = createReducer(\n  initialState,\n  on(UserActions.addUser, (state, { user }) => {\n    return adapter.addOne(user, state)\n  }),\n  on(UserActions.upsertUser, (state, { user }) => {\n    return adapter.upsertOne(user, state);\n  }),\n  on(UserActions.addUsers, (state, { users }) => {\n    return adapter.addMany(users, state);\n  }),\n  on(UserActions.upsertUsers, (state, { users }) => {\n    return adapter.upsertUsers(users, state);\n  }),\n  on(UserActions.updateUser, (state, { user }) => {\n    return adapter.updateOne(user, state);\n  }),\n  on(UserActions.updateUsers, (state, { users }) => {\n    return adapter.updateMany(users, state);\n  }),\n  on(UserActions.mapUsers, (state, { entityMap }) => {\n    return adapter.map(entityMap, state);\n  }),\n  on(UserActions.deleteUser, (state, { id }) => {\n    return adapter.removeOne(id, state);\n  }),\n  on(UserActions.deleteUsers, (state, { ids }) => {\n    return adapter.removeMany(ids, state);\n  }),\n  on(UserActions.deleteUsersByPredicate, (state, { predicate }) => {\n    return adapter.removeMany(predicate, state);\n  }),\n  on(UserActions.loadUsers, (state, { users }) => {\n    return adapter.addAll(users, state);\n  }),\n  on(UserActions.clearUsers, (state, { selectedUserId }) => {\n    return adapter.removeAll({ ...state, selectedUserId: null });\n  }));\n\nexport const getSelectedUserId = (state: State) => state.selectedUserId;\n\n// get the selectors\nconst {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n\n// select the array of user ids\nexport const selectUserIds = selectIds;\n\n// select the dictionary of user entities\nexport const selectUserEntities = selectEntities;\n\n// select the array of users\nexport const selectAllUsers = selectAll;\n\n// select the total user count\nexport const selectUserTotal = selectTotal;\n</user></user></user></code-example>\n<h3 id=\"entity-selectors\">Entity Selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity/adapter#entity-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>getSelectors</code> method returned by the created entity adapter provides functions for selecting information from the entity.</p>\n<p>The <code>getSelectors</code> method takes a selector function as its only argument to select the piece of state for a defined entity.</p>\n<p>Usage:</p>\n<code-example header=\"index.ts\">\nimport {\n  <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>,\n  <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a>,\n  <a href=\"api/store/ActionReducerMap\" class=\"code-anchor\">ActionReducerMap</a>,\n} from '@ngrx/store';\nimport * as fromUser from './user.reducer';\n\nexport interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  users: fromUser.State;\n}\n\nexport const reducers: <a href=\"api/store/ActionReducerMap\" class=\"code-anchor\">ActionReducerMap</a><state> = {\n  users: fromUser.reducer,\n};\n\nexport const selectUserState = createFeatureSelector<fromuser class=\"state\">('users');\n\nexport const selectUserIds = createSelector(\n  selectUserState,\n  fromUser.selectUserIds\n);\nexport const selectUserEntities = createSelector(\n  selectUserState,\n  fromUser.selectUserEntities\n);\nexport const selectAllUsers = createSelector(\n  selectUserState,\n  fromUser.selectAllUsers\n);\nexport const selectUserTotal = createSelector(\n  selectUserState,\n  fromUser.selectUserTotal\n);\nexport const selectCurrentUserId = createSelector(\n  selectUserState,\n  fromUser.getSelectedUserId\n);\n\nexport const selectCurrentUser = createSelector(\n  selectUserEntities,\n  selectCurrentUserId,\n  (userEntities, userId) => userEntities[userId]\n);\n</fromuser></state></code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/entity-actions\n - guide/data/entity-reducer\n-->\n<!-- links from this doc:\n - api/data/ChangeSetOperation#Add\n - api/data/ChangeSetOperation#Upsert\n - api/data/RequestData#method\n - api/data/UpdateResponseData#id\n - api/entity/EntityAdapter\n - api/entity/EntityState\n - api/entity/Update\n - api/entity/createEntityAdapter\n - api/store/ActionReducerMap\n - api/store/State\n - api/store/createAction\n - api/store/createFeatureSelector\n - api/store/createSelector\n - api/store/props\n - guide/entity/adapter#adapter-collection-methods\n - guide/entity/adapter#adapter-methods\n - guide/entity/adapter#createentityadaptert\n - guide/entity/adapter#entity-adapter\n - guide/entity/adapter#entity-selectors\n - guide/entity/adapter#getinitialstate\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/entity/adapter.md?message=docs%3A%20describe%20your%20change...\n-->"
}