{"version":3,"sources":["webpack:///./src/app/custom-elements/expandable-section/expandable-section.component.ts","webpack:///./src/app/custom-elements/expandable-section/expandable-section.module.ts","webpack:///./node_modules/@angular/cdk/esm2015/accordion.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/esm2015/expansion.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/expansion/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/expansion/typings/index.d.ts.MatExpansionPanel.html","webpack:///./node_modules/@angular/material/expansion/typings/index.d.ts.MatExpansionPanelHeader.html","webpack:///./src/app/custom-elements/expandable-section/expandable-section.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/expandable-section/expandable-section.component.html","webpack:///./src/app/custom-elements/expandable-section/expandable-section.module.ngfactory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/cdk/esm2015/portal.js.pre-build-optimizer.js"],"names":["ExpandableSectionComponent","expandable_section_module_ExpandableSectionModule","[object Object]","this","customElementComponent","nextId$1","accordion_CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","Subscription","EMPTY","closed","core","opened","destroyed","expandedChange","id","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","multi","expanded","_subscribeToOpenCloseAllActions","Object","coercion","emit","notify","markForCheck","disabled","complete","unsubscribe","_openCloseAllActions","subscribe","CdkAccordionModule","MAT_ACCORDION","uniqueId","expansion_MatExpansionPanel","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","super","_hideToggle","afterExpand","afterCollapse","_inputChanges","Subject","_headerId","hideToggle","value","displayMode","_getExpandedState","_lazyContent","pipe","startWith","filter","_portal","take","portal","_template","changes","next","ngOnDestroy","event","phaseName","toState","fromState","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","expansion_MatExpansionPanelHeader","panel","_element","_focusMonitor","_parentChangeSubscription","accordionHideToggleChange","_stateChanges","empty","merge","_containsFocus","focusVia","monitor","origin","_handleHeaderFocus","toggle","keyCode","keycodes","preventDefault","_toggle","_handleHeaderKeydown","stopMonitoring","MatExpansionModule","RenderType_MatExpansionPanel","encapsulation","styles","data","animation","type","name","definitions","height","visibility","offset","options","undefined","expr","timings","View_MatExpansionPanel_1","_l","View_MatExpansionPanel_0","_v","en","$event","ad","component","_bodyAnimation","_ck","_co","RenderType_MatExpansionPanelHeader","transform","params","collapsedHeight","expandedHeight","steps","selector","optional","View_MatExpansionPanelHeader_1","View_MatExpansionPanelHeader_0","common","ngIf","_showToggle","RenderType_ExpandableSectionComponent","View_ExpandableSectionComponent_0","collections","fesm2015_animations","_keydown","a11y","_hasSpacing","currVal_3","currVal_4","currVal_5","_getPanelId","currVal_6","_isExpanded","currVal_7","currVal_8","currVal_9","title","View_ExpandableSectionComponent_Host_0","ExpandableSectionComponentNgFactory","__webpack_require__","d","__webpack_exports__","ExpandableSectionModuleNgFactory","ComponentPortal","TemplatePortal","BasePortalOutlet","DomPortalOutlet","CdkPortal","CdkPortalOutlet","PortalModule","PortalInjector","_angular_core__WEBPACK_IMPORTED_MODULE_0__","throwPortalAlreadyAttachedError","Error","Portal","host","throwNullPortalOutletError","hasAttached","_attachedHost","attach","throwNoPortalAttachedError","detach","isAttached","viewContainerRef","injector","componentFactoryResolver","template","context","templateRef","elementRef","_isDisposed","_attachedPortal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","setAttachedHost","_invokeDisposeFn","fn","_disposeFn","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentFactory","resolveComponentFactory","componentRef","createComponent","length","setDisposeFn","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","dispose","parentNode","removeChild","_isInitialized","attached","attachedRef","_attachedRef","ref","clear","_parentInjector","_customTokens","token","notFoundValue","get"],"mappings":"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","file":"expandable-section-expandable-section-module-ngfactory.82ed025b4f846a98eed1.js","sourcesContent":["/* tslint:disable component-selector */\nimport {Component, Input} from '@angular/core';\n\n/** Custom element wrapper for the material expansion panel with a title input. */\n@Component({\n  selector: 'aio-expandable-section',\n  templateUrl: 'expandable-section.component.html',\n})\nexport class ExpandableSectionComponent {\n  @Input() title;\n}\n","import { NgModule, Type } from '@angular/core';\nimport { ExpandableSectionComponent } from './expandable-section.component';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { MatExpansionModule } from '@angular/material';\n\n@NgModule({\n  imports: [ MatExpansionModule ],\n  declarations: [ ExpandableSectionComponent, ],\n  entryComponents: [ ExpandableSectionComponent ]\n})\nexport class ExpandableSectionModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = ExpandableSectionComponent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Used to generate unique ID for each accordion.\n  @type {?} */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /**\n         * Emits when the state of the accordion changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * Stream that emits true/false when openAll/closeAll is triggered.\n         */\n        this._openCloseAllActions = new Subject();\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = `cdk-accordion-${nextId++}`;\n        this._multi = false;\n    }\n    /**\n     * Whether the accordion should allow multiple expanded accordion items simultaneously.\n     * @return {?}\n     */\n    get multi() { return this._multi; }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    openAll() {\n        this._openCloseAll(true);\n    }\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    closeAll() {\n        this._openCloseAll(false);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    _openCloseAll(expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    }\n}\nCdkAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion',\n            },] },\n];\nCdkAccordion.propDecorators = {\n    multi: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Used to generate unique ID for each accordion item.\n  @type {?} */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Subscription to openAll/closeAll events.\n         */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * \\@docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = `cdk-accordion-child-${nextId$1++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /**\n         * Unregister function for _expansionDispatcher.\n         */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /**\n     * Whether the AccordionItem is expanded.\n     * @return {?}\n     */\n    get expanded() { return this._expanded; }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /** *\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                  @type {?} */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the AccordionItem is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n}\nCdkAccordionItem.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ],\n            },] },\n];\n/** @nocollapse */\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher }\n];\nCdkAccordionItem.propDecorators = {\n    closed: [{ type: Output }],\n    opened: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    expandedChange: [{ type: Output }],\n    expanded: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule };\n//# sourceMappingURL=accordion.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, ElementRef, Input, Inject, Optional, Output, SkipSelf, ViewContainerRef, ViewEncapsulation, ViewChild, Host, ContentChildren, NgModule } from '@angular/core';\nimport { animate, animateChild, group, state, style, transition, trigger, query } from '@angular/animations';\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge, Subscription, EMPTY } from 'rxjs';\nimport { filter, startWith, take } from 'rxjs/operators';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, HOME, END } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n  @type {?} */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time and timing curve for expansion panel animations.\n  @type {?} */\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/** *\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * \\@docs-private\n  @type {?} */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel header height. */\n    expansionHeaderHeight: trigger('expansionHeight', [\n        state('collapsed, void', style({\n            height: '{{collapsedHeight}}',\n        }), {\n            params: { collapsedHeight: '48px' },\n        }),\n        state('expanded', style({\n            height: '{{expandedHeight}}'\n        }), {\n            params: { expandedHeight: '64px' }\n        }),\n        transition('expanded <=> collapsed, void => collapsed', group([\n            query('@indicatorRotate', animateChild(), { optional: true }),\n            animate(EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    /**\n     * @param {?} _template\n     */\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _CdkAccordionItem = CdkAccordionItem;\n/** *\n * Counter for generating unique element ids.\n  @type {?} */\nlet uniqueId = 0;\nconst ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?=} _document\n     * @param {?=} _animationMode\n     */\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, \n    // @breaking-change 8.0.0 _document and _animationMode to be made required\n    _document, _animationMode) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /**\n         * An event emitted after the body's expansion animation happens.\n         */\n        this.afterExpand = new EventEmitter();\n        /**\n         * An event emitted after the body's collapse animation happens.\n         */\n        this.afterCollapse = new EventEmitter();\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        this._inputChanges = new Subject();\n        /**\n         * ID for the associated header element. Used for a11y labelling.\n         */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        this.accordion = accordion;\n        this._document = _document;\n    }\n    /**\n     * Whether the toggle indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    _hasSpacing() {\n        if (this.accordion) {\n            // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n            // the [displayMode] input changes, the change detection will also cover the host bindings\n            // of this expansion panel.\n            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n        }\n        return false;\n    }\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith(/** @type {?} */ ((null))), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._inputChanges.complete();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _bodyAnimation(event) {\n        const { phaseName, toState, fromState } = event;\n        if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n            this.afterExpand.emit();\n        }\n        if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n            this.afterCollapse.emit();\n        }\n    }\n    /**\n     * Checks whether the expansion panel's content contains the currently-focused element.\n     * @return {?}\n     */\n    _containsFocus() {\n        if (this._body && this._document) {\n            /** @type {?} */\n            const focusedElement = this._document.activeElement;\n            /** @type {?} */\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.decorators = [\n    { type: Component, args: [{styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media screen and (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"],\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content><div class=\\\"mat-expansion-panel-content\\\" role=\\\"region\\\" [@bodyExpansion]=\\\"_getExpandedState()\\\" (@bodyExpansion.done)=\\\"_bodyAnimation($event)\\\" [attr.aria-labelledby]=\\\"_headerId\\\" [id]=\\\"id\\\" #body><div class=\\\"mat-expansion-panel-body\\\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template></div><ng-content select=\\\"mat-action-row\\\"></ng-content></div>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: ɵ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                }\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanel.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatExpansionPanel.propDecorators = {\n    hideToggle: [{ type: Input }],\n    afterExpand: [{ type: Output }],\n    afterCollapse: [{ type: Output }],\n    _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\n    _body: [{ type: ViewChild, args: ['body',] }]\n};\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n    /**\n     * @param {?} panel\n     * @param {?} _element\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     */\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        /** @type {?} */\n        const accordionHideToggleChange = panel.accordion ?\n            panel.accordion._stateChanges.pipe(filter(changes => !!changes[\"hideToggle\"])) : EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => !!(changes[\"hideToggle\"] || changes[\"disabled\"]))))\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        _focusMonitor.monitor(_element).subscribe(origin => {\n            if (origin && panel.accordion) {\n                panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    _toggle() {\n        this.panel.toggle();\n    }\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this._toggle();\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @param {?=} origin Origin of the action that triggered the focus.\n     * @return {?}\n     */\n    focus(origin = 'program') {\n        this._focusMonitor.focusVia(this._element, origin);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-expansion-panel-header',\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n                template: \"<span class=\\\"mat-content\\\"><ng-content select=\\\"mat-panel-title\\\"></ng-content><ng-content select=\\\"mat-panel-description\\\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\" class=\\\"mat-expansion-indicator\\\"></span>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                    matExpansionAnimations.expansionHeaderHeight\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)',\n                    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n                },\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelHeader.ctorParameters = () => [\n    { type: MatExpansionPanel, decorators: [{ type: Host }] },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef }\n];\nMatExpansionPanelHeader.propDecorators = {\n    expandedHeight: [{ type: Input }],\n    collapsedHeight: [{ type: Input }]\n};\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            },] },\n];\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() { return this._hideToggle; }\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this._headers).withWrap();\n    }\n    /**\n     * Handles keyboard events coming in from the panel headers.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleHeaderKeydown(event) {\n        const { keyCode } = event;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME) {\n            manager.setFirstItemActive();\n            event.preventDefault();\n        }\n        else if (keyCode === END) {\n            manager.setLastItemActive();\n            event.preventDefault();\n        }\n        else {\n            this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * @param {?} header\n     * @return {?}\n     */\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n}\nMatAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion'\n                }\n            },] },\n];\nMatAccordion.propDecorators = {\n    _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n    hideToggle: [{ type: Input }],\n    displayMode: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatExpansionModule, MatAccordion, MAT_ACCORDION, _CdkAccordionItem, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations };\n//# sourceMappingURL=expansion.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/expansion\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/cdk/accordion\";\nimport * as i4 from \"@angular/cdk/portal\";\nimport * as i5 from \"@angular/cdk/collections\";\nimport * as i6 from \"@angular/platform-browser/animations\";\nimport * as i7 from \"@angular/cdk/a11y\";\nvar MatExpansionModuleNgFactory = i0.ɵcmf(i1.MatExpansionModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i3.CdkAccordionModule, i3.CdkAccordionModule, []), i0.ɵmpd(1073742336, i4.PortalModule, i4.PortalModule, []), i0.ɵmpd(1073742336, i1.MatExpansionModule, i1.MatExpansionModule, [])]); });\nexport { MatExpansionModuleNgFactory as MatExpansionModuleNgFactory };\nvar styles_MatExpansionPanel = [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media screen and (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"];\nvar RenderType_MatExpansionPanel = i0.ɵcrt({ encapsulation: 2, styles: styles_MatExpansionPanel, data: { \"animation\": [{ type: 7, name: \"bodyExpansion\", definitions: [{ type: 0, name: \"collapsed, void\", styles: { type: 6, styles: { height: \"0px\", visibility: \"hidden\" }, offset: null }, options: undefined }, { type: 0, name: \"expanded\", styles: { type: 6, styles: { height: \"*\", visibility: \"visible\" }, offset: null }, options: undefined }, { type: 1, expr: \"expanded <=> collapsed, void => collapsed\", animation: { type: 4, styles: null, timings: \"225ms cubic-bezier(0.4,0.0,0.2,1)\" }, options: null }], options: {} }] } });\nexport { RenderType_MatExpansionPanel as RenderType_MatExpansionPanel };\nfunction View_MatExpansionPanel_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nexport function View_MatExpansionPanel_0(_l) { return i0.ɵvid(2, [i0.ɵqud(402653184, 1, { _body: 0 }), i0.ɵncd(null, 0), (_l()(), i0.ɵeld(2, 0, [[1, 0], [\"body\", 1]], null, 5, \"div\", [[\"class\", \"mat-expansion-panel-content\"], [\"role\", \"region\"]], [[24, \"@bodyExpansion\", 0], [1, \"aria-labelledby\", 0], [8, \"id\", 0]], [[null, \"@bodyExpansion.done\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"@bodyExpansion.done\" === en)) {\n        var pd_0 = (_co._bodyAnimation($event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵeld(3, 0, null, null, 3, \"div\", [[\"class\", \"mat-expansion-panel-body\"]], null, null, null, null, null)), i0.ɵncd(null, 1), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatExpansionPanel_1)), i0.ɵdid(6, 212992, null, 0, i4.CdkPortalOutlet, [i0.ComponentFactoryResolver, i0.ViewContainerRef], { portal: [0, \"portal\"] }, null), i0.ɵncd(null, 2)], function (_ck, _v) { var _co = _v.component; var currVal_3 = _co._portal; _ck(_v, 6, 0, currVal_3); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._getExpandedState(); var currVal_1 = _co._headerId; var currVal_2 = _co.id; _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2); }); }\nexport function View_MatExpansionPanel_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 16777216, null, null, 3, \"mat-expansion-panel\", [[\"class\", \"mat-expansion-panel\"]], [[2, \"mat-expanded\", null], [2, \"_mat-animation-noopable\", null], [2, \"mat-expansion-panel-spacing\", null]], null, null, View_MatExpansionPanel_0, RenderType_MatExpansionPanel)), i0.ɵdid(1, 1753088, null, 1, i1.MatExpansionPanel, [[3, i1.MAT_ACCORDION], i0.ChangeDetectorRef, i5.UniqueSelectionDispatcher, i0.ViewContainerRef, i2.DOCUMENT, [2, i6.ANIMATION_MODULE_TYPE]], null, null), i0.ɵqud(335544320, 1, { _lazyContent: 0 }), i0.ɵprd(256, null, i1.MAT_ACCORDION, undefined, [])], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1).expanded; var currVal_1 = (i0.ɵnov(_v, 1)._animationMode === \"NoopAnimations\"); var currVal_2 = i0.ɵnov(_v, 1)._hasSpacing(); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2); }); }\nvar MatExpansionPanelNgFactory = i0.ɵccf(\"mat-expansion-panel\", i1.MatExpansionPanel, View_MatExpansionPanel_Host_0, { expanded: \"expanded\", disabled: \"disabled\", hideToggle: \"hideToggle\" }, { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"]);\nexport { MatExpansionPanelNgFactory as MatExpansionPanelNgFactory };\nvar styles_MatExpansionPanelHeader = [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"];\nvar RenderType_MatExpansionPanelHeader = i0.ɵcrt({ encapsulation: 2, styles: styles_MatExpansionPanelHeader, data: { \"animation\": [{ type: 7, name: \"indicatorRotate\", definitions: [{ type: 0, name: \"collapsed, void\", styles: { type: 6, styles: { transform: \"rotate(0deg)\" }, offset: null }, options: undefined }, { type: 0, name: \"expanded\", styles: { type: 6, styles: { transform: \"rotate(180deg)\" }, offset: null }, options: undefined }, { type: 1, expr: \"expanded <=> collapsed, void => collapsed\", animation: { type: 4, styles: null, timings: \"225ms cubic-bezier(0.4,0.0,0.2,1)\" }, options: null }], options: {} }, { type: 7, name: \"expansionHeight\", definitions: [{ type: 0, name: \"collapsed, void\", styles: { type: 6, styles: { height: \"{{collapsedHeight}}\" }, offset: null }, options: { params: { collapsedHeight: \"48px\" } } }, { type: 0, name: \"expanded\", styles: { type: 6, styles: { height: \"{{expandedHeight}}\" }, offset: null }, options: { params: { expandedHeight: \"64px\" } } }, { type: 1, expr: \"expanded <=> collapsed, void => collapsed\", animation: { type: 3, steps: [{ type: 11, selector: \"@indicatorRotate\", animation: { type: 9, options: null }, options: { optional: true } }, { type: 4, styles: null, timings: \"225ms cubic-bezier(0.4,0.0,0.2,1)\" }], options: null }, options: null }], options: {} }] } });\nexport { RenderType_MatExpansionPanelHeader as RenderType_MatExpansionPanelHeader };\nfunction View_MatExpansionPanelHeader_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 0, \"span\", [[\"class\", \"mat-expansion-indicator\"]], [[24, \"@indicatorRotate\", 0]], null, null, null, null))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._getExpandedState(); _ck(_v, 0, 0, currVal_0); }); }\nexport function View_MatExpansionPanelHeader_0(_l) { return i0.ɵvid(2, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"span\", [[\"class\", \"mat-content\"]], null, null, null, null, null)), i0.ɵncd(null, 0), i0.ɵncd(null, 1), i0.ɵncd(null, 2), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatExpansionPanelHeader_1)), i0.ɵdid(5, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._showToggle(); _ck(_v, 5, 0, currVal_0); }, null); }\nexport function View_MatExpansionPanelHeader_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"mat-expansion-panel-header\", [[\"class\", \"mat-expansion-panel-header\"], [\"role\", \"button\"]], [[1, \"id\", 0], [1, \"tabindex\", 0], [1, \"aria-controls\", 0], [1, \"aria-expanded\", 0], [1, \"aria-disabled\", 0], [2, \"mat-expanded\", null], [40, \"@expansionHeight\", 0]], [[null, \"click\"], [null, \"keydown\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 1)._toggle() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"keydown\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 1)._keydown($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, View_MatExpansionPanelHeader_0, RenderType_MatExpansionPanelHeader)), i0.ɵdid(1, 180224, null, 0, i1.MatExpansionPanelHeader, [i1.MatExpansionPanel, i0.ElementRef, i7.FocusMonitor, i0.ChangeDetectorRef], null, null), i0.ɵpod(2, { collapsedHeight: 0, expandedHeight: 1 }), i0.ɵpod(3, { value: 0, params: 1 })], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1).panel._headerId; var currVal_1 = (i0.ɵnov(_v, 1).disabled ? (0 - 1) : 0); var currVal_2 = i0.ɵnov(_v, 1)._getPanelId(); var currVal_3 = i0.ɵnov(_v, 1)._isExpanded(); var currVal_4 = i0.ɵnov(_v, 1).panel.disabled; var currVal_5 = i0.ɵnov(_v, 1)._isExpanded(); var currVal_6 = _ck(_v, 3, 0, i0.ɵnov(_v, 1)._getExpandedState(), _ck(_v, 2, 0, i0.ɵnov(_v, 1).collapsedHeight, i0.ɵnov(_v, 1).expandedHeight)); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6); }); }\nvar MatExpansionPanelHeaderNgFactory = i0.ɵccf(\"mat-expansion-panel-header\", i1.MatExpansionPanelHeader, View_MatExpansionPanelHeader_Host_0, { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, {}, [\"mat-panel-title\", \"mat-panel-description\", \"*\"]);\nexport { MatExpansionPanelHeaderNgFactory as MatExpansionPanelHeaderNgFactory };\n","<ng-content select=\"mat-expansion-panel-header\"></ng-content><div class=\"mat-expansion-panel-content\" role=\"region\" [@bodyExpansion]=\"_getExpandedState()\" (@bodyExpansion.done)=\"_bodyAnimation($event)\" [attr.aria-labelledby]=\"_headerId\" [id]=\"id\" #body><div class=\"mat-expansion-panel-body\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\"_portal\"></ng-template></div><ng-content select=\"mat-action-row\"></ng-content></div>","<span class=\"mat-content\"><ng-content select=\"mat-panel-title\"></ng-content><ng-content select=\"mat-panel-description\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\" class=\"mat-expansion-indicator\"></span>","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../node_modules/@angular/material/expansion/typings/index.ngfactory\";\nimport * as i2 from \"@angular/material/expansion\";\nimport * as i3 from \"@angular/cdk/collections\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/platform-browser/animations\";\nimport * as i6 from \"@angular/cdk/a11y\";\nimport * as i7 from \"./expandable-section.component\";\nvar styles_ExpandableSectionComponent = [];\nvar RenderType_ExpandableSectionComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_ExpandableSectionComponent, data: {} });\nexport { RenderType_ExpandableSectionComponent as RenderType_ExpandableSectionComponent };\nexport function View_ExpandableSectionComponent_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 16777216, null, null, 9, \"mat-expansion-panel\", [[\"class\", \"mat-expansion-panel\"], [\"style\", \"background: inherit\"]], [[2, \"mat-expanded\", null], [2, \"_mat-animation-noopable\", null], [2, \"mat-expansion-panel-spacing\", null]], null, null, i1.View_MatExpansionPanel_0, i1.RenderType_MatExpansionPanel)), i0.ɵdid(1, 1753088, null, 1, i2.MatExpansionPanel, [[3, i2.MAT_ACCORDION], i0.ChangeDetectorRef, i3.UniqueSelectionDispatcher, i0.ViewContainerRef, i4.DOCUMENT, [2, i5.ANIMATION_MODULE_TYPE]], null, null), i0.ɵqud(335544320, 1, { _lazyContent: 0 }), i0.ɵprd(256, null, i2.MAT_ACCORDION, undefined, []), (_l()(), i0.ɵeld(4, 0, null, 0, 4, \"mat-expansion-panel-header\", [[\"class\", \"mat-expansion-panel-header\"], [\"role\", \"button\"]], [[1, \"id\", 0], [1, \"tabindex\", 0], [1, \"aria-controls\", 0], [1, \"aria-expanded\", 0], [1, \"aria-disabled\", 0], [2, \"mat-expanded\", null], [40, \"@expansionHeight\", 0]], [[null, \"click\"], [null, \"keydown\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 5)._toggle() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"keydown\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 5)._keydown($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, i1.View_MatExpansionPanelHeader_0, i1.RenderType_MatExpansionPanelHeader)), i0.ɵdid(5, 180224, null, 0, i2.MatExpansionPanelHeader, [i2.MatExpansionPanel, i0.ElementRef, i6.FocusMonitor, i0.ChangeDetectorRef], null, null), i0.ɵpod(6, { collapsedHeight: 0, expandedHeight: 1 }), i0.ɵpod(7, { value: 0, params: 1 }), (_l()(), i0.ɵted(8, 2, [\" \", \" \"])), i0.ɵncd(1, 0)], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = i0.ɵnov(_v, 1).expanded; var currVal_1 = (i0.ɵnov(_v, 1)._animationMode === \"NoopAnimations\"); var currVal_2 = i0.ɵnov(_v, 1)._hasSpacing(); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2); var currVal_3 = i0.ɵnov(_v, 5).panel._headerId; var currVal_4 = (i0.ɵnov(_v, 5).disabled ? (0 - 1) : 0); var currVal_5 = i0.ɵnov(_v, 5)._getPanelId(); var currVal_6 = i0.ɵnov(_v, 5)._isExpanded(); var currVal_7 = i0.ɵnov(_v, 5).panel.disabled; var currVal_8 = i0.ɵnov(_v, 5)._isExpanded(); var currVal_9 = _ck(_v, 7, 0, i0.ɵnov(_v, 5)._getExpandedState(), _ck(_v, 6, 0, i0.ɵnov(_v, 5).collapsedHeight, i0.ɵnov(_v, 5).expandedHeight)); _ck(_v, 4, 0, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9); var currVal_10 = _co.title; _ck(_v, 8, 0, currVal_10); }); }\nexport function View_ExpandableSectionComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"aio-expandable-section\", [], null, null, null, View_ExpandableSectionComponent_0, RenderType_ExpandableSectionComponent)), i0.ɵdid(1, 49152, null, 0, i7.ExpandableSectionComponent, [], null, null)], null, null); }\nvar ExpandableSectionComponentNgFactory = i0.ɵccf(\"aio-expandable-section\", i7.ExpandableSectionComponent, View_ExpandableSectionComponent_Host_0, { title: \"title\" }, {}, [\"*\"]);\nexport { ExpandableSectionComponentNgFactory as ExpandableSectionComponentNgFactory };\n","<mat-expansion-panel style=\"background: inherit\">\n  <mat-expansion-panel-header>\n    {{title}}\n  </mat-expansion-panel-header>\n\n  <ng-content></ng-content>\n</mat-expansion-panel>\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./expandable-section.module\";\nimport * as i2 from \"./expandable-section.component.ngfactory\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/cdk/accordion\";\nimport * as i5 from \"@angular/cdk/portal\";\nimport * as i6 from \"@angular/material/expansion\";\nvar ExpandableSectionModuleNgFactory = i0.ɵcmf(i1.ExpandableSectionModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.ExpandableSectionComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i4.CdkAccordionModule, i4.CdkAccordionModule, []), i0.ɵmpd(1073742336, i5.PortalModule, i5.PortalModule, []), i0.ɵmpd(1073742336, i6.MatExpansionModule, i6.MatExpansionModule, []), i0.ɵmpd(1073742336, i1.ExpandableSectionModule, i1.ExpandableSectionModule, [])]); });\nexport { ExpandableSectionModuleNgFactory as ExpandableSectionModuleNgFactory };\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        this.setDisposeFn((() => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-portal], [cdkPortal], [portal]',\n                exportAs: 'cdkPortal',\n            },] },\n];\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        this.attached = new EventEmitter();\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n}\nCdkPortalOutlet.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                inputs: ['portal: cdkPortalOutlet']\n            },] },\n];\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\nclass PortalModule {\n}\nPortalModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [CdkPortal, CdkPortalOutlet],\n                declarations: [CdkPortal, CdkPortalOutlet],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n//# sourceMappingURL=portal.js.map\n"],"sourceRoot":""}