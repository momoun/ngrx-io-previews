{
  "id": "guide/store/testing",
  "title": "Testing",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/testing.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"testing\">Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#testing\"><i class=\"material-icons\">link</i></a></h1>\n<h3 id=\"using-a-mock-store\">Using a Mock Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#using-a-mock-store\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>()</code> function registers providers that allow you to mock out the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> for testing functionality that has a dependency on <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> without setting up reducers.\nYou can write tests validating behaviors corresponding to the specific state snapshot easily.</p>\n<div class=\"alert is-helpful\">\n<p><strong>Note:</strong> All dispatched actions don't affect to the state, but you can see them in the <code><a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a></code> stream.</p>\n</div>\n<p>Usage: </p>\n<code-example header=\"auth.guard.spec.ts\">\nimport { TestBed } from '@angular/core/testing';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> } from '@ngrx/store';\nimport { <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a> } from '@ngrx/store/testing';\nimport { cold } from 'jasmine-marbles';\n\nimport { AuthGuard } from '../guards/auth.guard';\n\ndescribe('Auth Guard', () => {\n  let guard: AuthGuard;\n  let store: <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>&#x3C;{ loggedIn: boolean }>;\n  const initialState = { loggedIn: false };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        // any modules needed\n      ],\n      providers: [\n        AuthGuard,\n        <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>({ initialState }),\n        // other providers\n      ],\n    });\n\n    guard = TestBed.get(AuthGuard);\n    store = TestBed.get(<a href=\"api/store/Store\" class=\"code-anchor\">Store</a>);\n  });\n\n  it('should return false if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is not logged in', () => {\n    const expected = cold('(a|)', { a: false });\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n\n  it('should return true if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is logged in', () => {\n    store.setState({ loggedIn: true });\n\n    const expected = cold('(a|)', { a: true });\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n});\n</code-example>\n<h3 id=\"using-mock-selectors\">Using Mock Selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#using-mock-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<p><code><a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a></code> also provides the ability to mock individual selectors to return a passed value using the <code><a href=\"\" class=\"code-anchor\">overrideSelector()</a></code> method. When the selector is invoked by the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> method, the returned value is overridden by the passed value, regardless of the current state in the store. </p>\n<p><code><a href=\"\" class=\"code-anchor\">overrideSelector()</a></code> returns a <code><a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a></code>. To update the mock selector to return a different value, use the <code><a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a></code>'s <code>setResult()</code> method.</p>\n<p><code><a href=\"\" class=\"code-anchor\">overrideSelector()</a></code> supports mocking the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> method (used in RxJS pipe) and the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> instance method using a string or selector.</p>\n<p>Usage:</p>\n<code-example header=\"auth-guard.service.ts\" path=\"testing-store/src/app/auth-guard.service.ts\">\nimport { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/select\" class=\"code-anchor\">select</a> } from '@ngrx/store';\nimport { take } from 'rxjs/operators';\nimport * as fromAuth from './reducers';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;fromAuth.State>) {}\n\n  canActivate() {\n    return this.store.pipe(\n      <a href=\"api/store/select\" class=\"code-anchor\">select</a>(fromAuth.getLoggedIn),\n      take(1)\n    );\n  }\n}\n\n</code-example>\n<code-example header=\"auth-guard.service.spec.ts\" path=\"testing-store/src/app/auth-guard.service.spec.ts\">\nimport { TestBed } from '@angular/core/testing';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a> } from '@ngrx/store';\nimport { <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>, <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a> } from '@ngrx/store/testing';\nimport { cold } from 'jasmine-marbles';\nimport { AuthGuard } from './auth-guard.service';\nimport * as fromAuth from './reducers';\n\ndescribe('Auth Guard', () => {\n  let guard: AuthGuard;\n  let store: <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>&#x3C;fromAuth.State>;\n  let loggedIn: <a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a>&#x3C;fromAuth.State, boolean>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [AuthGuard, <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>()],\n    });\n\n    store = TestBed.get(<a href=\"api/store/Store\" class=\"code-anchor\">Store</a>);\n    guard = TestBed.get(AuthGuard);\n\n    loggedIn = store.overrideSelector(fromAuth.getLoggedIn, false);\n  });\n\n  it('should return false if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is not logged in', () => {\n    const expected = cold('(a|)', { a: false });\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n\n  it('should return true if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is logged in', () => {\n    const expected = cold('(a|)', { a: true });\n\n    loggedIn.setResult(true);\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n});\n\n</code-example>\n<p>In this example, we mock the <code>getLoggedIn</code> selector by using <code>overrideSelector</code>, passing in the <code>getLoggedIn</code> selector with a default mocked return value of <code>false</code>.  In the second test, we use <code>setResult()</code> to update the mock selector to return <code>true</code>.</p>\n<p>Try the <live-example name=\"testing-store\"></live-example>.</p>\n<h3 id=\"using-store-for-integration-testing\">Using Store for Integration Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#using-store-for-integration-testing\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use the <code>StoreModule.forRoot</code> in your <code>TestBed</code> configuration when testing components or services that inject <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code>.</p>\n<ul>\n<li>Reducing state is synchronous, so mocking out the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> isn't required.</li>\n<li>Use the <code><a href=\"api/store/combineReducers\" class=\"code-anchor\">combineReducers</a></code> method with the map of feature reducers to compose the <code><a href=\"api/store/State\" class=\"code-anchor\">State</a></code> for the test.</li>\n<li>Dispatch actions to load data into the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code>.</li>\n</ul>\n<code-example header=\"my.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/select\" class=\"code-anchor\">select</a> } from '@ngrx/store';\nimport * as fromFeature from '../reducers';\nimport * as DataActions from '../actions/data';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'my-component',\n  template: `\n    &#x3C;div *ngFor=\"let item of items$ | async\">{{ item }}&#x3C;/div>\n\n    &#x3C;button (click)=\"onRefresh()\">Refresh Items&#x3C;/button>\n  `,\n})\nexport class MyComponent implements OnInit {\n  items$ = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(fromFeature.selectFeatureItems));\n\n  constructor(private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;fromFeature.State>) {}\n\n  ngOnInit() {\n    this.store.dispatch(DataActions.loadData());\n  }\n\n  onRefresh() {\n    this.store.dispatch(DataActions.refreshItems());\n  }\n}\n</code-example>\n<code-example header=\"my.component.spec.ts\">\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a>, <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/combineReducers\" class=\"code-anchor\">combineReducers</a> } from '@ngrx/store';\nimport { MyComponent } from './my.component';\nimport * as fromRoot from '../reducers';\nimport * as fromFeature from '../feature/reducers';\nimport * as DataActions from '../actions/data';\n\ndescribe('My Component', () => {\n  let component: MyComponent;\n  let fixture: ComponentFixture&#x3C;MyComponent>\n  let store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;fromFeature.State>\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        StoreModule.forRoot({\n          ...fromRoot.reducers,\n          feature: <a href=\"api/store/combineReducers\" class=\"code-anchor\">combineReducers</a>(fromFeature.reducers),\n        }),\n        // other imports\n      ],\n      declarations: [\n        MyComponent,\n        // other declarations\n      ],\n      providers: [\n        // other providers\n      ],\n    });\n\n    store = TestBed.get(<a href=\"api/store/Store\" class=\"code-anchor\">Store</a>);\n\n    spyOn(store, 'dispatch').and.callThrough();\n\n    fixture = TestBed.createComponent(MyComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should be created', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should dispatch an action to load data when created', () => {\n    const action = DataActions.loadData();\n\n    expect(store.dispatch).toHaveBeenCalledWith(action);\n  });\n\n  it('should dispatch an action to refreshing data', () => {\n    const action = DataActions.refreshData();\n\n    component.onRefresh();\n\n    expect(store.dispatch).toHaveBeenCalledWith(action);\n  });\n\n  it('should display a list of items after the data is <a href=\"api/data/EntityCollection#loaded\" class=\"code-anchor\">loaded</a>', () => {\n    const items = [1, 2, 3];\n    const action = DataActions.loadDataSuccess({ items });\n\n    store.dispatch(action);\n\n    component.items$.subscribe(data => {\n      expect(data.length).toBe(items.length);\n    });\n  });\n});\n</code-example>\n<h3 id=\"testing-selectors\">Testing selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#testing-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can use the projector function used by the selector by accessing the <code>.projector</code> property.</p>\n<code-example header=\"my.reducer.ts\">\nexport interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  evenNums: number[];\n  oddNums: number[];\n}\n\nexport const selectSumEvenNums = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.evenNums,\n  evenNums => evenNums.reduce((prev, curr) => prev + curr)\n);\nexport const selectSumOddNums = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.oddNums,\n  oddNums => oddNums.reduce((prev, curr) => prev + curr)\n);\nexport const selectTotal = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectSumEvenNums,\n  selectSumOddNums,\n  (evenSum, oddSum) => evenSum + oddSum\n);\n</code-example>\n<code-example header=\"my.reducer.spec.ts\">\nimport * as fromMyReducers from './my-reducers';\n\ndescribe('My Selectors', () => {\n  it('should calc selectTotal', () => {\n    expect(fromMyReducers.selectTotal.projector(2, 3)).toBe(5);\n  });\n});\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/EntityCollection#loaded\n - api/effects/Actions\n - api/store-devtools/StoreDevtools#state\n - api/store/MemoizedSelector\n - api/store/State\n - api/store/Store\n - api/store/StoreModule\n - api/store/combineReducers\n - api/store/createSelector\n - api/store/select\n - api/store/testing/MockSelector#selector\n - api/store/testing/MockStore\n - api/store/testing/provideMockStore\n - guide/store/testing#testing\n - guide/store/testing#testing-selectors\n - guide/store/testing#using-a-mock-store\n - guide/store/testing#using-mock-selectors\n - guide/store/testing#using-store-for-integration-testing\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/testing.md?message=docs%3A%20describe%20your%20change...\n-->"
}