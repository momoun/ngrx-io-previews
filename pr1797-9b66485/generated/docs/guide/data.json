{
  "id": "guide/data",
  "title": "NgRx Data",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngrx-data\">NgRx Data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data#ngrx-data\"><i class=\"material-icons\">link</i></a></h1>\n<p>NgRx Data is an extension that offers a gentle introduction to NgRx by simplifying management of <strong>entity data</strong> while reducing the amount of explicitness.  </p>\n<p>Entity data is only one kind of application data.  NgRx Data should not be used for non-entity or highly idiosyncratic data.</p>\n<div class=\"alert is-important\">\n<p>An <strong>entity</strong> is an object with long-lived data values that you read from and write to a database.  An entity refers to some \"thing\" in the application domain.  Examples include a <em>Customer</em>, <em>Order</em>, <em>LineItem</em>, <em>Product</em>, and <em>User</em>.</p>\n</div>\n<h2 id=\"introduction\">Introduction<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data#introduction\"><i class=\"material-icons\">link</i></a></h2>\n<p>Many applications have substantial <em>domain models</em> with 10s or 100s of entity types.</p>\n<p>In NgRx, to create, retrieve, update, and delete (CRUD) data for every entity type is an overwhelming task. You're writing <em>actions</em>, <em>action-creators</em>, <em>reducers</em>, <em>effects</em>, <em>dispatchers</em>, and <em>selectors</em> as well as the HTTP GET, PUT, POST, and DELETE methods <em>for each entity type</em>.</p>\n<p>In even a small model, this is a ton of repetitive code to create, maintain, and test.</p>\n<p>NgRx Data allows consumers to use NgRx while radically reducing the explicitness necessary to manage entities with NgRx.</p>\n<h2 id=\"key-concepts\">Key Concepts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data#key-concepts\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>NgRx Data can be used with NgRx to provide simplified management of entity data.</li>\n<li>NgRx Data automates the creation of actions, reducers, effects, dispatchers, and selectors for each entity type.</li>\n<li>NgRx Data provides default HTTP GET, PUT, POST, and DELETE methods for each entity type.</li>\n<li>NgRx Data should not be used for non-entity or highly idiosyncratic data.  They are better managed with NgRx.</li>\n</ul>\n<h2 id=\"defining-the-entities\">Defining the entities<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data#defining-the-entities\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <code><a href=\"api/data/EntityMetadataMap\" class=\"code-anchor\">EntityMetadataMap</a></code> is used to tell NgRx Data about your entities.  Add a property to the set for each entity name.</p>\n<code-example header=\"entity-metadata.ts\">\nimport { <a href=\"api/data/EntityMetadataMap\" class=\"code-anchor\">EntityMetadataMap</a> } from '@ngrx/data';\n\nconst <a href=\"api/data/EntityDataModuleConfig#entityMetadata\" class=\"code-anchor\">entityMetadata</a>: <a href=\"api/data/EntityMetadataMap\" class=\"code-anchor\">EntityMetadataMap</a> = {\n  Hero: {},\n  Villain: {}\n};\n\n// because the plural of \"hero\" is not \"heros\"\nconst pluralNames = { Hero: 'Heroes' };\n\nexport const entityConfig = {\n  <a href=\"api/data/EntityDataModuleConfig#entityMetadata\" class=\"code-anchor\">entityMetadata</a>,\n  pluralNames\n};\n</code-example>\n<p>Export the entity configuration to be used when registering it in your <code>AppModule</code>.</p>\n<h2 id=\"registering-the-entity-store\">Registering the entity store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data#registering-the-entity-store\"><i class=\"material-icons\">link</i></a></h2>\n<p>Once the entity configuration is created, you need to put it into the root store for NgRx.  This is done by importing the <code>entityConfig</code> and then passing it to the <code><a href=\"api/data/EntityDataModule#forRoot\" class=\"code-anchor\">EntityDataModule.forRoot()</a></code> function.</p>\n<code-example header=\"app.module.ts\">\nimport { NgModule } from '@angular/core';\nimport { <a href=\"api/effects/EffectsModule\" class=\"code-anchor\">EffectsModule</a> } from '@ngrx/effects';\nimport { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\nimport { <a href=\"api/data/DefaultDataServiceConfig\" class=\"code-anchor\">DefaultDataServiceConfig</a>, <a href=\"api/data/EntityDataModule\" class=\"code-anchor\">EntityDataModule</a> } from '@ngrx/data';\nimport { entityConfig } from './entity-metadata';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n    EntityDataModule.forRoot(entityConfig)\n  ]\n})\nexport class AppModule {}\n</code-example>\n<h2 id=\"creating-entity-data-services\">Creating entity data services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data#creating-entity-data-services\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgRx Data handles creating, retrieving, updating, and deleting data on your server by extending <code><a href=\"api/data/EntityCollectionServiceBase\" class=\"code-anchor\">EntityCollectionServiceBase</a></code> in your service class.</p>\n<code-example header=\"hero.service.ts\">\nimport { Injectable } from '@angular/core';\nimport {\n  <a href=\"api/data/EntityCollectionServiceBase\" class=\"code-anchor\">EntityCollectionServiceBase</a>,\n  <a href=\"api/data/EntityCollectionServiceElementsFactory\" class=\"code-anchor\">EntityCollectionServiceElementsFactory</a>\n} from '@ngrx/data';\nimport { Hero } from '../core';\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService extends <a href=\"api/data/EntityCollectionServiceBase\" class=\"code-anchor\">EntityCollectionServiceBase</a>&#x3C;Hero> {\n  constructor(serviceElementsFactory: <a href=\"api/data/EntityCollectionServiceElementsFactory\" class=\"code-anchor\">EntityCollectionServiceElementsFactory</a>) {\n    super('Hero', serviceElementsFactory);\n  }\n}\n</code-example>\n<h2 id=\"using-ngrx-data-in-components\">Using NgRx Data in components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data#using-ngrx-data-in-components\"><i class=\"material-icons\">link</i></a></h2>\n<p>To access the entity data, components should inject entity data services.</p>\n<code-example header=\"heroes.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Hero } from '../../core';\nimport { HeroService } from '../hero.service';\n\n@Component({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.scss']\n})\nexport class HeroesComponent implements OnInit {\n  <a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a>$: Observable&#x3C;boolean>;\n  heroes$: Observable&#x3C;Hero[]>;\n\n  constructor(private heroService: HeroService) {\n    this.heroes$ = heroService.entities$;\n    this.loading$ = heroService.loading$;\n  }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  add(hero: Hero) {\n    this.heroService.add(hero);\n  }\n\n  delete(hero: Hero) {\n    this.heroService.delete(hero.id);\n  }\n\n  getHeroes() {\n    this.heroService.getAll();\n    this.close();\n  }\n\n  update(hero: Hero) {\n    this.heroService.update(hero);\n  }\n}\n</code-example>\n<p>In this example, you need to listen for the stream of heroes. The <code>heroes$</code> property references the <code>heroeService.entities$</code> Observable.  When state is changed as a result of a successful HTTP request (initiated by <code>getAll()</code>, for example), the heroes$ property will emit the latest Hero array.</p>\n<p>By default, the service includes the <code><a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a>$</code> Observable to indicate whether an HTTP request is in progress.  This helps applications manage loading states.</p>\n\n</div>\n\n<!-- links to this doc:\n - docs\n-->\n<!-- links from this doc:\n - api/data/DefaultDataServiceConfig\n - api/data/EntityCollection#loading\n - api/data/EntityCollectionServiceBase\n - api/data/EntityCollectionServiceElementsFactory\n - api/data/EntityDataModule\n - api/data/EntityDataModule#forRoot\n - api/data/EntityDataModuleConfig#entityMetadata\n - api/data/EntityMetadataMap\n - api/effects/EffectsModule\n - api/store/StoreModule\n - guide/data#creating-entity-data-services\n - guide/data#defining-the-entities\n - guide/data#introduction\n - guide/data#key-concepts\n - guide/data#ngrx-data\n - guide/data#registering-the-entity-store\n - guide/data#using-ngrx-data-in-components\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/index.md?message=docs%3A%20describe%20your%20change...\n-->"
}