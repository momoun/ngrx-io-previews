{
  "id": "guide/store/recipes/angular-elements",
  "title": "Using Store with Angular Elements",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/recipes/angular-elements.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"using-store-with-angular-elements\">Using Store with Angular Elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/angular-elements#using-store-with-angular-elements\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"creating-angular-elements\">Creating Angular Elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/angular-elements#creating-angular-elements\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following recipe  illustrates utilizing Angular Elements with a NgRx Store to manage the state of a counter, and select and display that counter state from within separate Angular Elements. This is all accomplished from within a single Angular Project and static HTML page.</p>\n<h2 id=\"recipe\">Recipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/angular-elements#recipe\"><i class=\"material-icons\">link</i></a></h2>\n<ol>\n<li>Create a new application by running the below command</li>\n</ol>\n<code-example language=\"sh\">\nng new ngRxElementDemo - createApplication=false\n</code-example>\n<h3 id=\"creating-library\">Creating Library<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/angular-elements#creating-library\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>Create a new Angular Library using below command</li>\n</ol>\n<code-example language=\"sh\">\nng g library my-counter\n</code-example>\n<ol start=\"2\">\n<li>Follow the instructions in the <a href=\"guide/store#installation\">Getting Started Guide</a> to create a new counter store complete with actions, reducer, and module.</li>\n<li>The only difference here is to split the code for increment, decrement and reset into seperate components.</li>\n<li>Rename <code>app.module.ts</code> to <code>counter.module.ts</code> file and add the below code.\n<code-example header=\"src/lib/counter.module.ts\" path=\"store-elements/projects/my-counter/src/lib/counter.module.ts\">\nimport { NgModule, Injector } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CounterComponent } from './counter.component';\nimport { CounterIncrementComponent } from './counter-increment/counter-increment.component';\nimport { CounterDecrementComponent } from './counter-decrement/counter-decrement.component';\nimport { CounterResetComponent } from './counter-reset/counter-reset.component';\nimport { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\nimport { counterReducer } from './counter.reducer';\nimport { createCustomElement } from '@angular/elements';\n\n@NgModule({\n  declarations: [CounterComponent, CounterIncrementComponent,\n    CounterDecrementComponent, CounterResetComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    StoreModule.forRoot({ count: counterReducer })\n  ],\n  entryComponents: [CounterComponent,\n    CounterIncrementComponent,\n    CounterDecrementComponent,\n    CounterResetComponent]\n})\nexport class CounterModule {\n    constructor(private injector: Injector ) {\n      const CounterElement = createCustomElement(CounterComponent, { injector });\n      // Register the custom element with the browser.\n      customElements.define('counter-element', CounterElement);\n\n      const CounterIncrementElement = createCustomElement(CounterIncrementComponent, { injector });\n      customElements.define('counter-increment', CounterIncrementElement);\n      const CounterDecrementElement = createCustomElement(CounterDecrementComponent, { injector });\n      customElements.define('counter-decrement', CounterDecrementElement);\n      const CounterResetElement = createCustomElement(CounterResetComponent, { injector });\n      customElements.define('counter-reset', CounterResetElement);\n    }\n\n}\n\n\n</code-example>\nIn the above code, we have added all the components in <code>entryComponents</code> array.This ensures the components are available for rendering as Angular Elements.In addition, inside the <code>constructor</code>, <code>createCustomElement</code> must be called for each component that will be used as an Angular Element.</li>\n</ol>\n<h3 id=\"creating-applications\">Creating Applications<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/angular-elements#creating-applications\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>Generate two (2) new applications within the project using the below command</li>\n</ol>\n<code-example language=\"sh\">\nng g application elementApp\nng g application counterelement\n</code-example>\n<ol start=\"2\">\n<li>Run the below command to add Angular Element as a dependency to our project.</li>\n</ol>\n<code-example language=\"sh\">\nng add @angular/elements\n</code-example>\n<ol start=\"3\">\n<li>Once the command is completed, you will notice below changes in <code>angular.json</code>, the above package only makes changes to default project which in our case is <code>elementApp</code>, so copy the below line and add the same to the scripts section of <code>counterelement</code></li>\n</ol>\n<code-example language=\"json\">\n\"scripts\": [\n{\"input\": \"node_modules/document-register-element/build/document-register-element.js\"}\n]\n</code-example>\n<h3 id=\"using-with-angular-application\">Using With Angular Application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/angular-elements#using-with-angular-application\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>Within elementApp add the below code in <code>app.module.ts</code>.\n<code-example header=\"elementApp/src/app/app.module.ts\" path=\"store-elements/projects/elementApp/src/app/app.module.ts\">\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { CounterModule } from 'my-counter';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    CounterModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule { }\n\n\n</code-example>\nIn the above code, we have imported <code>CounterModule</code> from our <code>my-counter</code> library and in <code>schemas</code> array we have added <code>CUSTOM_ELEMENTS_SCHEMA</code> because we are loading Custom Elements in our App.</li>\n<li>Add the below code in <code>app.component.html</code>.\n<code-example header=\"elementApp/src/app/app.component.html\" path=\"store-elements/projects/elementApp/src/app/app.component.html\">\n&#x3C;counter-increment>&#x3C;/counter-increment>\n&#x3C;counter-element>&#x3C;/counter-element>\n&#x3C;counter-decrement>&#x3C;/counter-decrement>\n&#x3C;counter-reset>&#x3C;/counter-reset>\n\n\n</code-example>\nHere we are using the Angular Elements, which we registered in our <code>my-counter</code> library.</li>\n<li>Run the below command to install polyfill required to support the Angular Elements on the older browser.</li>\n</ol>\n<code-example language=\"sh\">\nnpm i @webcomponents/webcomponentsjs -save\n</code-example>\n<ol start=\"4\">\n<li>Add the below polyfill to <code>polyfills.ts</code> file available in both the app created.</li>\n</ol>\n<code-example language=\"json\">\nimport '@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js';\n</code-example>\n<ol start=\"5\">\n<li>Verify the app by running it locally using below command.</li>\n</ol>\n<code-example language=\"sh\">\nng build my-counter &#x26;&#x26; ng serve --project=elementApp -o\n</code-example>\n<h3 id=\"using-with-static-page\">Using with Static Page<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/angular-elements#using-with-static-page\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>In order to build the <code>custom-element.js</code> file, which can be used outside an Angular App, go to the <code>counterelement</code> app and add the below code in <code>app.module.ts</code>.\n<code-example header=\"counterelement/src/app/app.module.ts\" path=\"store-elements/projects/counterelement/src/app/app.module.ts\">\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CounterModule } from 'my-counter';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    CounterModule\n  ],\n  providers: [],\n  bootstrap: [],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule {\n\n  ngDoBootstrap() {\n\n  }\n\n }\n\n\n</code-example>\nIn the above code, you may notice we are not using any component inside the <code>bootstrap</code> array. This is because we are going to bootstrap our app manually using <code>ngDoBootstrap</code>. This allows us to create a <code>counter-element.js</code> file which we can use inside any static page.</li>\n<li>Run the below commands to install a package to merge files to create <code>custom-element.js</code> file.</li>\n</ol>\n<code-example language=\"sh\">\nnpm install jscat - save-dev\n</code-example>\n<ol start=\"3\">\n<li>Add a new folder <code>htmlapp</code> in the root, create a new file named <code>index.html</code> and add the below code.\n<code-example header=\"htmlapp/index.html\" path=\"store-elements/htmlapp/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n  &#x3C;meta charset=\"UTF-8\">\n  &#x3C;base href=\"/\">\n  &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  &#x3C;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  &#x3C;script src=\"counter-element.js\">&#x3C;/script>\n  &#x3C;title>Document&#x3C;/title>\n&#x3C;/head>\n\n&#x3C;body>\n  &#x3C;counter-increment>&#x3C;/counter-increment>\n  &#x3C;counter-element>&#x3C;/counter-element>\n  &#x3C;counter-decrement>&#x3C;/counter-decrement>\n  &#x3C;counter-reset>&#x3C;/counter-reset>\n&#x3C;/body>\n\n&#x3C;/html>\n\n\n</code-example></li>\n<li>Add two (2) new commands to the <code>scripts</code> section of <code>package.json</code>.</li>\n</ol>\n<code-example language=\"json\">\n\"build-element\": \"ng build my-counter &#x26;&#x26; ng build - project=counterelement - prod - output-hashing=none\",\n\"package\": \"jscat ./dist/counterelement/runtime.js ./dist/counterelement/polyfills.js ./dist/counterelement/scripts.js ./dist/counterelement/main.js > htmlapp/counter-element.js\",\n</code-example>\n<ol start=\"5\">\n<li>Run the following commands to build and package your custom element into a single <code>.js</code> file.</li>\n</ol>\n<code-example language=\"sh\">\nnpm run build-element\nnpm run package\n</code-example>\n<ol start=\"6\">\n<li>Install <code>http-server</code> globally by using the below command. Read more about <code>http-server</code> package on <a href=\"https://github.com/indexzero/http-server\">github</a>.</li>\n</ol>\n<code-example language=\"sh\">\nnpm i -g http-server\n</code-example>\n<ol start=\"7\">\n<li>Move to <code>htmlapp</code> folder and run <code>http-server</code>, to see Angular Elements with NgRx in action on a static page.</li>\n</ol>\n<p>You can download  <live-example name=\"store-elements\" downloadonly=\"\">Angular Elements Project</live-example>.</p>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/store/StoreModule\n - guide/store#installation\n - guide/store/recipes/angular-elements#creating-angular-elements\n - guide/store/recipes/angular-elements#creating-applications\n - guide/store/recipes/angular-elements#creating-library\n - guide/store/recipes/angular-elements#recipe\n - guide/store/recipes/angular-elements#using-store-with-angular-elements\n - guide/store/recipes/angular-elements#using-with-angular-application\n - guide/store/recipes/angular-elements#using-with-static-page\n - https://github.com/indexzero/http-server\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/recipes/angular-elements.md?message=docs%3A%20describe%20your%20change...\n-->"
}