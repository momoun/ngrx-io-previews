{
  "id": "guide/store/testing",
  "title": "Testing",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/testing.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"testing\">Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#testing\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"using-a-mock-store\">Using a Mock Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#using-a-mock-store\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>()</code> function registers providers that allow you to mock out the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> for testing functionality that has a dependency on <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> without setting up reducers.\nYou can write tests validating behaviors corresponding to the specific state snapshot easily.</p>\n<div class=\"alert is-helpful\">\n<p><strong>Note:</strong> All dispatched actions don't affect to the state, but you can see them in the <code><a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a></code> stream.</p>\n</div>\n<h3 id=\"example-auth-guard\">Example: Auth Guard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#example-auth-guard\"><i class=\"material-icons\">link</i></a></h3>\n<p>Usage: </p>\n<code-example header=\"auth.guard.spec.ts\">\nimport { TestBed } from '@angular/core/testing';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> } from '@ngrx/store';\nimport { <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a> } from '@ngrx/store/testing';\nimport { cold } from 'jasmine-marbles';\n\nimport { AuthGuard } from '../guards/auth.guard';\nimport * as AuthActions from '../actions/auth-actions';\n\ndescribe('Auth Guard', () => {\n  let guard: AuthGuard;\n  let store: <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>&#x3C;{ loggedIn: boolean }>;\n  const <a href=\"api/store/testing/MockStoreConfig#initialState\" class=\"code-anchor\">initialState</a> = { loggedIn: false };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        // any modules needed\n      ],\n      providers: [\n        AuthGuard,\n        <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>({ <a href=\"api/store/testing/MockStoreConfig#initialState\" class=\"code-anchor\">initialState</a> }),\n        // other providers\n      ],\n    });\n\n    guard = TestBed.get(AuthGuard);\n    store = TestBed.get(<a href=\"api/store/Store\" class=\"code-anchor\">Store</a>);\n  });\n\n  it('should return false if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is not logged in', () => {\n    const expected = cold('(a|)', { a: false });\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n\n  it('should return true if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is logged in', () => {\n    store.setState({ loggedIn: true });\n\n    const expected = cold('(a|)', { a: true });\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n});\n</code-example>\n<h3 id=\"example-effect-injecting-state\">Example: Effect injecting state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#example-effect-injecting-state\"><i class=\"material-icons\">link</i></a></h3>\n<p>The mock store can simplify testing Effects that inject State using the RxJs <code>withLatestFrom</code> operator.  The example below shows the <code>addBookToCollectionSuccess$</code> effect displaying a different alert depending on the number of books in the collection state.</p>\n<code-example header=\"collection.effects.ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>, createEffect } from '@ngrx/effects';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CollectionApiActions } from '@example-app/books/actions';\nimport * as fromBooks from '@example-app/books/reducers';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/select\" class=\"code-anchor\">select</a> } from '@ngrx/store';\n\n@Injectable()\nexport class CollectionEffects {\n  addBookToCollectionSuccess$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>(CollectionApiActions.addBookSuccess),\n        withLatestFrom(this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(fromBooks.getCollectionBookIds))),\n        map(([action, bookCollection]) => {\n          if (bookCollection.length === 1) {\n            window.alert('Congrats on adding your first book!');\n          } else {\n            window.alert('You have added book number ' + bookCollection.length);\n          }\n          return action;\n        })\n      ),\n    { dispatch: false }\n  );\n\n  constructor(\n    private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>,\n    private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a><frombooks class=\"state\">\n  ) {}\n}\n</frombooks></code-example>\n<p>In our test, we can use the mock store to adjust the number of books in the collection.  We provide the <code><a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a></code> an initial state containing one book. When testing the effect when two or more books are in the collection, we provide a different state using <code><a href=\"api/store/testing/MockStore#setState\" class=\"code-anchor\">setState()</a></code>.</p>\n<code-example header=\"collection.effects.spec.ts\">\nimport { TestBed } from '@angular/core/testing';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a> } from '@ngrx/effects';\nimport { <a href=\"api/effects/testing/provideMockActions\" class=\"code-anchor\">provideMockActions</a> } from '@ngrx/effects/testing';\nimport { cold, hot } from 'jasmine-marbles';\nimport { Observable } from 'rxjs';\nimport { CollectionApiActions } from '@example-app/books/actions';\nimport { Book } from '@example-app/books/models/book';\nimport { CollectionEffects } from '@example-app/books/effects/collection.effects';\nimport * as fromBooks from '@example-app/books/reducers';\nimport { <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>, <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a> } from '@ngrx/store/testing';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> } from '@ngrx/store';\n\ndescribe('CollectionEffects', () => {\n  let effects: CollectionEffects;\n  let actions$: Observable<any>;\n  let store: MockStore<frombooks class=\"state\">;\n  const initialState = {\n    books: {\n      collection: {\n        loaded: true,\n        loading: false,\n        ids: ['1'],\n      },\n    },\n  } as fromBooks.State;\n\n  const book1 = { id: '111', volumeInfo: {} } as Book;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        CollectionEffects,\n        provideMockActions(() => actions$),\n        provideMockStore({ initialState }),\n      ],\n    });\n\n    effects = TestBed.get(CollectionEffects);\n    actions$ = TestBed.get(Actions);\n    store = TestBed.get(Store);\n  });\n\n  describe('addBookToCollectionSuccess$', () => {\n    beforeEach(() => {\n      spyOn(window, 'alert');\n    });\n\n    it('should alert congratulatory message when adding the first book on success', () => {\n      const action = CollectionApiActions.addBookSuccess({ book: book1 });\n      const expected = cold('-c', { c: action });\n      actions$ = hot('-a', { a: action });\n      expect(effects.addBookToCollectionSuccess$).toBeObservable(expected);\n      expect(window.alert).toHaveBeenCalledWith(\n        'Congrats on adding your first book!'\n      );\n    });\n\n    it('should alert number of books aftering adding the second book', () => {\n      store.setState({\n        books: {\n          collection: {\n            loaded: true,\n            loading: false,\n            ids: ['1', '2'],\n          },\n        },\n      } as fromBooks.State);\n\n      const action = CollectionApiActions.addBookSuccess({ book: book1 });\n      const expected = cold('-c', { c: action });\n      actions$ = hot('-a', { a: action });\n      expect(effects.addBookToCollectionSuccess$).toBeObservable(expected);\n      expect(window.alert).toHaveBeenCalledWith('You have added book number 2');\n    });\n  });\n});\n</frombooks></any></code-example>\n<h2 id=\"using-store-for-integration-testing\">Using Store for Integration Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#using-store-for-integration-testing\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code>StoreModule.forRoot</code> in your <code>TestBed</code> configuration when testing components or services that inject <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code>.</p>\n<ul>\n<li>Reducing state is synchronous, so mocking out the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> isn't required.</li>\n<li>Use the <code><a href=\"api/store/combineReducers\" class=\"code-anchor\">combineReducers</a></code> method with the map of feature reducers to compose the <code><a href=\"api/store/State\" class=\"code-anchor\">State</a></code> for the test.</li>\n<li>Dispatch actions to load data into the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code>.</li>\n</ul>\n<code-example header=\"my.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/select\" class=\"code-anchor\">select</a> } from '@ngrx/store';\nimport * as fromFeature from '../reducers';\nimport * as DataActions from '../actions/data';\n\n@Component({\n  selector: 'my-component',\n  template: `\n    &#x3C;div *ngFor=\"let item of items$ | async\">{{ item }}&#x3C;/div>\n\n    &#x3C;button (click)=\"onRefresh()\">Refresh Items&#x3C;/button>\n  `,\n})\nexport class MyComponent implements OnInit {\n  items$ = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(fromFeature.selectFeatureItems));\n\n  constructor(private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;fromFeature.State>) {}\n\n  ngOnInit() {\n    this.store.dispatch(new DataActions.LoadData());\n  }\n\n  onRefresh() {\n    this.store.dispatch(new DataActions.RefreshItems());\n  }\n}\n</code-example>\n<code-example header=\"my.component.spec.ts\">\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a>, <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/combineReducers\" class=\"code-anchor\">combineReducers</a> } from '@ngrx/store';\nimport { MyComponent } from './my.component';\nimport * as fromRoot from '../reducers';\nimport * as fromFeature from '../feature/reducers';\nimport * as DataActions from '../actions/data';\n\ndescribe('My Component', () => {\n  let component: MyComponent;\n  let fixture: ComponentFixture&#x3C;MyComponent>\n  let store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;fromFeature.State>\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        StoreModule.forRoot({\n          ...fromRoot.reducers,\n          feature: <a href=\"api/store/combineReducers\" class=\"code-anchor\">combineReducers</a>(fromFeature.reducers),\n        }),\n        // other imports\n      ],\n      declarations: [\n        MyComponent,\n        // other declarations\n      ],\n      providers: [\n        // other providers\n      ],\n    });\n\n    store = TestBed.get(<a href=\"api/store/Store\" class=\"code-anchor\">Store</a>);\n\n    spyOn(store, 'dispatch').and.callThrough();\n\n    fixture = TestBed.createComponent(MyComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should be created', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should dispatch an action to load data when created', () => {\n    const action = new DataActions.LoadData();\n\n    expect(store.dispatch).toHaveBeenCalledWith(action);\n  });\n\n  it('should dispatch an action to refreshing data', () => {\n    const action = new DataActions.RefreshData();\n\n    component.onRefresh();\n\n    expect(store.dispatch).toHaveBeenCalledWith(action);\n  });\n\n  it('should display a list of items after the data is loaded', () => {\n    const items = [1, 2, 3];\n    const action = new DataActions.LoadDataSuccess({ items });\n\n    store.dispatch(action);\n\n    component.items$.subscribe(data => {\n      expect(data.length).toBe(items.length);\n    });\n  });\n});\n</code-example>\n<h2 id=\"testing-selectors\">Testing selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#testing-selectors\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can use the projector function used by the selector by accessing the <code>.projector</code> property.</p>\n<code-example header=\"my.reducer.ts\">\nexport interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  evenNums: number[];\n  oddNums: number[];\n}\n\nexport const selectSumEvenNums = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.evenNums,\n  evenNums => evenNums.reduce((prev, curr) => prev + curr)\n);\nexport const selectSumOddNums = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.oddNums,\n  oddNums => oddNums.reduce((prev, curr) => prev + curr)\n);\nexport const selectTotal = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectSumEvenNums,\n  selectSumOddNums,\n  (evenSum, oddSum) => evenSum + oddSum\n);\n</code-example>\n<code-example header=\"my.reducer.spec.ts\">\nimport * as fromMyReducers from './my-reducers';\n\ndescribe('My Selectors', () => {\n  it('should calc selectTotal', () => {\n    expect(fromMyReducers.selectTotal.projector(2, 3)).toBe(5);\n  });\n});\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/effects/Actions\n - api/effects/Effect\n - api/effects/ofType\n - api/effects/testing/provideMockActions\n - api/store-devtools/StoreDevtools#state\n - api/store/State\n - api/store/Store\n - api/store/StoreModule\n - api/store/combineReducers\n - api/store/createSelector\n - api/store/select\n - api/store/testing/MockStore\n - api/store/testing/MockStore#setState\n - api/store/testing/MockStoreConfig#initialState\n - api/store/testing/provideMockStore\n - guide/store/testing#example-auth-guard\n - guide/store/testing#example-effect-injecting-state\n - guide/store/testing#testing\n - guide/store/testing#testing-selectors\n - guide/store/testing#using-a-mock-store\n - guide/store/testing#using-store-for-integration-testing\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/testing.md?message=docs%3A%20describe%20your%20change...\n-->"
}