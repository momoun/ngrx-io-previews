{
  "id": "guide/effects/operators",
  "title": "Effects operators",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/operators.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"effects-operators\">Effects operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/operators#effects-operators\"><i class=\"material-icons\">link</i></a></h1>\n<p>As part of Effect library, NgRx provides some useful operators that are frequently\nused. </p>\n<h2 id=\"oftype\"><code><a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/operators#oftype\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a></code> operator filters the stream of actions based on either string\nvalues or Action Creators.</p>\n<p>The generic for the <code><a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>&#x3C;TypeUnion></code> must be provided in order for type\ninference to work properly with string values. Action Creators that are based on\n<code><a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a></code> function do not have the same limitation.</p>\n<p>The <code><a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a></code> operator takes up to 5 arguments with proper type inference. It can\ntake even more, however the type would be inferred as <code><a href=\"api/store/Action\" class=\"code-anchor\">Action</a></code> interface.</p>\n<code-example header=\"auth.effects.ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>, <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a> } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport {\n  LoginPageActions,\n  AuthApiActions,\n} from '../actions';\nimport { Credentials } from '../models/user';\nimport { AuthService } from '../<a href=\"api/data/EntityDataService#services\" class=\"code-anchor\">services</a>/auth.service';\n\n@Injectable()\nexport class AuthEffects {\n  login$ = <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>(() =>\n    this.actions$.pipe(\n      // Filters by <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> <a href=\"api/store/Creator\" class=\"code-anchor\">Creator</a> 'login'\n      <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>(LoginPageActions.login),\n      exhaustMap(action =>\n        this.authService.login(action.credentials).pipe(\n          map(user => AuthApiActions.loginSuccess({ user })),\n          catchError(error => of(AuthApiActions.loginFailure({ error })))\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>,\n    private authService: AuthService\n  ) {}\n}\n</code-example>\n<h2 id=\"maptoaction\"><code><a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/operators#maptoaction\"><i class=\"material-icons\">link</i></a></h2>\n<p>Many effects are used to call APIs and due to the nature of network communication\nsome of them may fail. That means that the service call should ideally be wrapped\nwith <code>catchError</code> to transform the failed request into another Action.</p>\n<p>Not only <code>catchError</code> is necessary, it's has to be used before the stream is\nflattened or has to be constructed to re-subscribe to the source Observable.\nMissing such error handling results in bugs that are hard to discover during PR\nsubmittion.</p>\n<p>Even people who are familiar with these mistakes still make them sometimes.</p>\n<p><code><a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a></code> operator wraps the <code>project</code> function that should return the main\n\"happy path\" Observable that emits Action(s). It also requires <code>error</code> callback\nto be provided, so that steam can be flattened safely.</p>\n<code-example header=\"auth.effects.ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>, <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>, <a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a> } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport {\n  LoginPageActions,\n  AuthApiActions,\n} from '../actions';\nimport { Credentials } from '../models/user';\nimport { AuthService } from '../<a href=\"api/data/EntityDataService#services\" class=\"code-anchor\">services</a>/auth.service';\n\n@Injectable()\nexport class AuthEffects {\n  login$ = <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>(() =>\n    this.actions$.pipe(\n      <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>(LoginPageActions.login),\n      <a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a>(\n        // Happy path callback\n        action => this.authService.login(action.credentials).pipe(\n            map(user => AuthApiActions.loginSuccess({ user }))),\n        // error callback\n        error => AuthApiActions.loginFailure({ error }),\n      )\n    )\n  );\n\n  constructor(\n    private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>,\n    private authService: AuthService\n  ) {}\n}\n</code-example>\n<p>Notice that it is no longer neccessy to wrap Error Action with <code>of</code> static\nObservable.</p>\n<h3 id=\"maptoaction-signatures\"><code><a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a></code> signatures<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/operators#maptoaction-signatures\"><i class=\"material-icons\">link</i></a></h3>\n<p><code><a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a></code> function has two signatures. The simple one takes two callbacks.</p>\n<code-example header=\"mapToAction with two callbacks\">\nfunction <a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a>&#x3C;\n  Input,\n  OutputAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>,\n  ErrorAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>\n>(\n  project: (input: Input, index: number) => Observable&#x3C;OutputAction>,\n  error: (error: any, input: Input) => ErrorAction\n): (source: Observable&#x3C;Input>) => Observable&#x3C;OutputAction | ErrorAction>;\n</code-example>\n<ul>\n<li><code>project</code>: A callback that is provided with input value (often an Action) and\nexpects the output result that is wrapped with Action</li>\n<li><code>error</code>: A callback that is called if <code>project</code> throws an error</li>\n</ul>\n<p><code><a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a></code> uses <code>concatMap</code> flattening strategy by default. When more\nconfigurable option is needed or for more advanced use cases you can provide\nthe config object.</p>\n<code-example header=\"mapToAction with config\">\n\n/** Represents <a href=\"api/data/DefaultDataServiceFactory#config\" class=\"code-anchor\">config</a> with named paratemeters for <a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a> */\nexport interface MapToActionConfig&#x3C;\n  Input,\n  OutputAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>,\n  ErrorAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>,\n  CompleteAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>,\n  UnsubscribeAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>\n> {\n  project: (input: Input, index: number) => Observable&#x3C;OutputAction>;\n  error: (error: any, input: Input) => ErrorAction;\n  complete?: (count: number, input: Input) => CompleteAction;\n  operator?: &#x3C;Input, OutputAction>(\n    project: (input: Input, index: number) => Observable&#x3C;OutputAction>\n  ) => OperatorFunction&#x3C;Input, OutputAction>;\n  unsubscribe?: (count: number, input: Input) => UnsubscribeAction;\n}\n\nfunction <a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a>&#x3C;\n  Input,\n  OutputAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>,\n  ErrorAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>,\n  CompleteAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> = never,\n  UnsubscribeAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> = never\n>(\n  <a href=\"api/data/DefaultDataServiceFactory#config\" class=\"code-anchor\">config</a>: MapToActionConfig&#x3C;\n    Input,\n    OutputAction,\n    ErrorAction,\n    CompleteAction,\n    UnsubscribeAction\n  >\n): (\n  source: Observable&#x3C;Input>\n) => Observable&#x3C;\n  OutputAction | ErrorAction | CompleteAction | UnsubscribeAction\n>;\n</code-example>\n<ul>\n<li><code>project</code>: A callback that is provided with input value (often an Action) and\nexpects the output result that is wrapped with Action</li>\n<li><code>error</code>: A callback that is called if <code>project</code> throws an error</li>\n<li><code>complete</code>: Optional complete action provider, when project completes</li>\n<li><code>operator</code>: Optional flattening operator. <code>concatMap</code> is used by default</li>\n<li><code>unsubscribe</code>: Optional unsubscribe action provider, when project is unsubscribed\n(e.g. in case of <code>switchMap</code> flattening operator when a new value arrives)</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/effects\n-->\n<!-- links from this doc:\n - api/data/DefaultDataServiceFactory#config\n - api/data/EntityDataService#services\n - api/effects/Actions\n - api/effects/createEffect\n - api/effects/mapToAction\n - api/effects/ofType\n - api/store/Action\n - api/store/Creator\n - api/store/createAction\n - guide/effects/operators#effects-operators\n - guide/effects/operators#maptoaction\n - guide/effects/operators#maptoaction-signatures\n - guide/effects/operators#oftype\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/operators.md?message=docs%3A%20describe%20your%20change...\n-->"
}