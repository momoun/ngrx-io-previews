{
  "id": "guide/component/coalesce",
  "title": "coalesce",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component/coalesce.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"coalesce\">coalesce<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/coalesce#coalesce\"><i class=\"material-icons\">link</i></a></h1>\n<p> Emits a value from the source observable on the trailing edge of an interval, then ignores subsequent\nsource values for a duration determined by another Observable (<code>durationSelector</code>), then repeats this process.</p>\n<p> The coalesce operator is based on the <a href=\"https://rxjs-dev.firebaseapp.com/api/operators/throttle\">throttle</a> operator.</p>\n<figure>\n  <img src=\"generated/images/guide/component/coalesce.png\" alt=\"coalesce Operator Marble Diagram\" width=\"100%\" height=\"100%\">\n</figure>\n<figure>\n  <img src=\"generated/images/guide/component/coalesce_2.png\" alt=\"coalesce Operator Marble Diagram (v2)\" width=\"100%\" height=\"100%\">\n</figure>\n<h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/coalesce#description\"><i class=\"material-icons\">link</i></a></h2>\n<p> Rendering, in most web applications, is by far the most performance crucial part.\nThe <code>coalesce</code> operator's general purpose is to buffer state changes together\nto a single emission per <code>animationFrame</code>, enabling the user to render changes only once per <code>animationFrame</code>.\nBy default, changes will be emitted on the trailing edge of an <code>animationFrame</code>.\nThis behavior is fully configurable by the <code>durationSelector</code>.</p>\n<p> However, the <code>coalesce</code> operator provides the option to define a custom coalescing scope via the <code><a href=\"api/data/DefaultDataServiceFactory#config\" class=\"code-anchor\">config</a></code>.\nIf provided, the buffered changes of the source will only be emitted once per scope.\nThis is especially helpful in scenarios where you want to have only one emission across multiple usages of the operator.</p>\n<p> You find a more in depth explanation in the <a href=\"guide/component/coalesce#scoping\">Usage</a> section of this document.</p>\n<h2 id=\"signature\">Signature<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/coalesce#signature\"><i class=\"material-icons\">link</i></a></h2>\n<code-example language=\"typescript\">\ncoalesce&#x3C;T>(durationSelector: (<a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a>: T) => SubscribableOrPromise&#x3C;any>, <a href=\"api/data/DefaultDataServiceFactory#config\" class=\"code-anchor\">config</a>: CoalesceConfig): MonoTypeOperatorFunction&#x3C;T>;\n\n// Defaults  \ndefaultCoalesceDurationSelector = &#x3C;T>(<a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a>: T) => generateFrames();\n    \ndefaultCoalesceConfig: CoalesceConfig = {\n      context: {isCoalescing: false},\n      leading: false,\n      trailing: true\n};\n</code-example>\n<h2 id=\"configuration\">Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/coalesce#configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p>  <strong>durationSelector:</strong></p>\n<p>  Optional. Default is <code>defaultCoalesceDurationSelector</code> (coalescing by animationFrame)\nA function that receives a value from the source Observable, for computing the silencing duration for each source value, returned as an Observable or a Promise.</p>\n<p>   <strong>config:</strong></p>\n<p>   Optional. Default is <code>defaultCoalesceConfig</code> ({ leading: false, trailing: true }` &#x26; scoping per Subscriber aka no scoping)\nBy default the coalescing operator emits on the trailing end of the defined durationSelector and per Subscriber. The context can be any object.</p>\n<h2 id=\"usage\">Usage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/coalesce#usage\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"basic-usage\">Basic usage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/coalesce#basic-usage\"><i class=\"material-icons\">link</i></a></h3>\n<p> By default the coalesce operator helps you to buffer incoming values within an animationFrame and emits once at the end.\nThis example demonstrates how the render method is only called once thus having four changes of the source stream.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { coalesce } from 'rxjs-state';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { range } from '@rxjs';\n \nconst source$ = range(1, 4); // stream of data\nsource$.pipe(\n    coalesce()\n).subscribe(stateChanges => {\n    render(); // render <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> will be called once for the <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> 4 of the stream\n});\n</code-example>\n<h3 id=\"scoping\">Scoping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/coalesce#scoping\"><i class=\"material-icons\">link</i></a></h3>\n<p> If multiple coalesce operators are configured with the same scope object, only one change will be emitted to the first <code>Subscriber</code>.\nThis simple example shows how it is possible to coalesce multiple subscribers to one shared scope object. This will result in\nonly one rendering call thus having multiple subscribers to the incoming stream.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { coalesce, generateFrames } from 'rxjs-state';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { range } from '@rxjs';\n \nconst source$ = range(1, 4); // stream of data\nconst coalesceConfig = {\n   context: {} // e.g. this.componentRef;\n};\n\nsource$.pipe(\n    coalesce(() => generateFrames(), coalesceConfig)\n).subscribe(stateChanges => {\n    render(); // render <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> will be called once for the <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> 4 of the stream\n});\n\nsource$.pipe(\n    coalesce(() => generateFrames(), coalesceConfig)\n).subscribe(stateChanges => {\n   render();\n});\n// view doesn't get rendered, since the <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> will be emitted only once per scope\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/DefaultDataServiceFactory#config\n - api/data/RequestData#method\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/testing/MockSelector#value\n - guide/component/coalesce#basic-usage\n - guide/component/coalesce#coalesce\n - guide/component/coalesce#configuration\n - guide/component/coalesce#description\n - guide/component/coalesce#scoping\n - guide/component/coalesce#signature\n - guide/component/coalesce#usage\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component/coalesce.md?message=docs%3A%20describe%20your%20change...\n - https://rxjs-dev.firebaseapp.com/api/operators/throttle\n-->"
}