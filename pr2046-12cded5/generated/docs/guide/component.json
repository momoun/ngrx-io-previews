{
  "id": "guide/component",
  "title": "@ngrx/component",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngrxcomponent\">@ngrx/component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#ngrxcomponent\"><i class=\"material-icons\">link</i></a></h1>\n<p>Reactive Component/Decorator library for Angular applications.</p>\n<p>Included are decorators and directives that support a fully reactive in Angular Components.  </p>\n<h2 id=\"introduction\">Introduction<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#introduction\"><i class=\"material-icons\">link</i></a></h2>\n<p>Parts of Angular like the <code>ReactiveFromsModule</code>, <code>RouterModule</code>, <code>HttpClientModule</code>, etc. are already reactive.\nFor those who prefer imperative code, it's a little effort to restrict it to a single subscription.</p>\n<p>On the other hand for those who prefer reactive code, it's not that easy.\nA lot of conveniences are missing, and beside the <code>async</code> pipe there is pretty much nothing to take away the manual mapping to observables.<br>\nFurthermore, an increasing number of packages start to be fully observable based. A very popular and widely used example is <a href=\"https://ngrx.io/\">NgRx</a>. It enables us to maintain global push-based state management based on observables.\nAlso, other well-known libraries, <a href=\"https://material.angular.io/\">angular material</a> provide a reactive way of usage.</p>\n<p>This creates even more interest and for so-called <code>reactive primitives</code> for the Angular framework, like the <code>async</code> and other template syntax, decorators and services.</p>\n<p>This library provides a set of primitives making it more convenient to work in a reactive architecture.</p>\n<h2 id=\"installation\">Installation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#installation\"><i class=\"material-icons\">link</i></a></h2>\n<p>Detailed installation instructions can be found on the !!!INSTALL LINK HERE!!! page.</p>\n<h2 id=\"included-primitives\">Included Primitives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#included-primitives\"><i class=\"material-icons\">link</i></a></h2>\n<!-- toc -->\n<ul>\n<li><a href=\"guide/component#push-pipe\">Push Pipe</a></li>\n<li><a href=\"guide/component#let-structural-directive\">Let Structural Directive</a></li>\n<li>\n<p><a href=\"guide/component#observable-life-cycle-hooks\">Observable Life Cycle Hooks</a></p>\n<ul>\n<li><a href=\"guide/component#selectchanges-rxjs-operator\">selectChanges RxJS Operator</a></li>\n</ul>\n</li>\n<li><a href=\"guide/component#observable-input-bindings\">Observable Input Bindings</a></li>\n<li><a href=\"guide/component#observable-output-bindings\">Observable Output Bindings</a></li>\n<li>\n<p><a href=\"guide/component#local-state-management\">Local State Management</a></p>\n<ul>\n<li><a href=\"guide/component#selectslices-rxjs-operator\">selectSlices RxJS Operator</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h3 id=\"push-pipe\">Push Pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#push-pipe\"><i class=\"material-icons\">link</i></a></h3>\n<p>An angular pipe similar to the <code>async</code> pipe but triggers <code>detectChanges</code> instead of <code>markForCheck</code>.\nThis is required to run zone-less. We render on every pushed message.\n(currently, there is an <a href=\"https://github.com/angular/angular/issues/31438\">isssue</a> with the <code>ChangeDetectorRef</code> in ivy so we have to wait for the fix.</p>\n<p>The pipe should work as template binding <code>{{thing$ | push}}</code>\nas well as an input binding <code>[color]=\"thing$ | push\"</code> and triggers the changes of the host component.</p>\n<code-example language=\"html\">\n&#x3C;div *ngIf=\"(thing$ | push) as thing\">\n  color: {{thing.color}}\n  shape: {{thing.shape}}\n&#x3C;div>\n\n&#x3C;app-color [color]=\"(thing$ | push).color\">\n&#x3C;/app-color>\n</code-example>\n<p><strong>Included Features:</strong></p>\n<ul>\n<li>subscription handling overview life cycle</li>\n<li>a unified way of handling <code>null</code> and <code>undefined</code> values with streams</li>\n<li>optional flag to turn off scheduling over <code>AnimationFrameScheduler</code> (on by default)</li>\n<li>change detection is done manually which allows it to work zone-less too</li>\n</ul>\n<h3 id=\"let-structural-directive\">Let Structural Directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#let-structural-directive\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>*ngrxLet</code> directive serves a convenient way of binding multiple observables in the same view context.\nIt also helps with some extra features under the hood.</p>\n<p>The current way of handling subscriptions in the view looks like this:</p>\n<code-example language=\"html\">\n&#x3C;ng-container *ngIf=\"{\n              color: observable1$ | async,\n              shape: observable2$ | async,\n              name:  observable3$ | async\n            } as c\">\n  {{c.color}}\n  &#x3C;app-color [color]=\"c.color\" [shape]=\"c.shape\" [name]=\"c.name\">\n  &#x3C;/app-color>  \n&#x3C;/ng-container>\n</code-example>\n<p>The <code>*ngrxLet</code> directive take over several things and makes it more convenient and save to work with streams in the template\n<code>*ngrxLet=\"o$ as o;\"</code> </p>\n<code-example language=\"html\">\n&#x3C;!-- observables = { color: observable1$, shape: observable2$, name:  observable3$ } -->\n\n&#x3C;ng-container *ngrxLet=\"observables$ as c\">\n  &#x3C;app-color [color]=\"c.color\" [shape]=\"c.shape\" [name]=\"c.name\">\n  &#x3C;/app-color>\n&#x3C;/ng-container>\n\n&#x3C;ng-container *ngrxLet=\"observables; let c\">\n  &#x3C;app-color [color]=\"c.color\" [shape]=\"c.shape\" [name]=\"c.name\">\n  &#x3C;/app-color>\n&#x3C;/ng-container>\n\n&#x3C;ng-container *ngrxLet=\"observables; color as c; shape as s; name as n\">\n  &#x3C;app-color [color]=\"c\" [shape]=\"s\" [name]=\"n\">\n  &#x3C;/app-color>\n&#x3C;/ng-container>\n</code-example>\n<p><strong>Included Features:</strong></p>\n<ul>\n<li>binding is always present. (<code>*ngIf=\"{}\"</code> normally effects it)</li>\n<li>it takes away the multiple usages of the <code>async</code> pipe </li>\n<li>proper handling of <code>null</code> and <code>undefined</code> values</li>\n<li>removes state slices if bound observable completes or errors</li>\n<li>an option to disable scheduling over <code>AnimationFrameScheduler</code> (on by default)</li>\n<li>control change detection and therefore can run zone-less</li>\n</ul>\n<h3 id=\"observable-life-cycle-hooks\">Observable Life Cycle Hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#observable-life-cycle-hooks\"><i class=\"material-icons\">link</i></a></h3>\n<p>A property decorator which turns a lifecycle method into an observable and assigns it to the related property.</p>\n<p>The decorator should work as a proxy for all life cycle hooks <code>@hook$('onInit') onInit$;</code>\nas well as forward passed values i.e. <code>changes</code> in from the <code>OnChanges</code> hook.</p>\n<code-example language=\"typescript\">\n  @hook$('onInit') onInit$;\n  @hook$('onDestroy') onDestroy$;\n\n  this.onInit$\n    .pipe(\n      switchMapTo(interval(1000)),\n      map(_ => Date.now()),\n      takeUntil(this.onDestroy$)\n    )\n    .subscribe();\n</code-example>\n<p><strong>Included Features</strong></p>\n<ul>\n<li>it handles late subscribers</li>\n<li>exposes only observables</li>\n<li>respects single shot vs ongoing life cycles</li>\n<li>subscription handling over the component lifetime</li>\n<li>return the latest value when resubscribing</li>\n</ul>\n<h4 id=\"selectchanges-rxjs-operator\">selectChanges RxJS Operator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#selectchanges-rxjs-operator\"><i class=\"material-icons\">link</i></a></h4>\n<p>An operator <code>selectChanges</code> to select one or many specific slices from <code>SimpleChange</code>.\nThis operator can be used in combination with <code>onChanges$</code>.</p>\n<p>It also provides a very early option to control the forwarded values.</p>\n<p><strong>Example of selectSlice operator</strong></p>\n<code-example language=\"typescript\">\nexport class MyComponent {\n  @hook$('onChanges') \n  onChanges$: Observable&#x3C;SimpleChanges>;\n\n  @Input() <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>;\n  <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>$ = this.onChanges$.pipe(getChange('<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>'));\n}\n</code-example>\n<p>Following things are done under the hood:</p>\n<ul>\n<li>pull out <code>currentValue</code> from <code>SimpleChanges</code> object</li>\n<li>optional it could have a param for a custom comparison function</li>\n</ul>\n<h3 id=\"observable-input-bindings\">Observable Input Bindings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#observable-input-bindings\"><i class=\"material-icons\">link</i></a></h3>\n<p>A property decorator which turns component or directive input binding into an observable and assigns it to the related property.</p>\n<code-example language=\"typescript\">\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-child',\n  template: `&#x3C;p>input: {{input$ | async}}&#x3C;/p>`,\n})\nexport class ChildComponent  {\n  @Input$()\n  input$;\n}\n</code-example>\n<p>Following things are done under the hood:</p>\n<ul>\n<li>It caches to consider late subscribers (life cycle hook related) </li>\n<li>It is multi-casted to avoid multiple subscriptions</li>\n<li>It works with WebComponents and AngularComponents</li>\n</ul>\n<h3 id=\"observable-output-bindings\">Observable Output Bindings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#observable-output-bindings\"><i class=\"material-icons\">link</i></a></h3>\n<p>TBD from Dominic Elm</p>\n<h3 id=\"local-state-management\">Local State Management<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#local-state-management\"><i class=\"material-icons\">link</i></a></h3>\n<p>This extension is maybe the most interesting one. While we can </p>\n<p>A tiny logic that combines:</p>\n<ul>\n<li>values over input bindings</li>\n<li>The component class internal state</li>\n<li>state rendered to view </li>\n<li>state from services.</li>\n</ul>\n<p>A way to connect events from the view and component as observables.</p>\n<code-example language=\"typescript\">\nconstructor(private lS: LocalState&#x3C;MyState>) {\n  this.lS\n    .connectSlice('num', interval(1000));\n  this.lS\n    .connectSlice('isNew', this.isNew$);\n  this.lS\n    .connectSlice('buttons', this.buttons$);\n}\n</code-example>\n<h4 id=\"selectslices-rxjs-operator\">selectSlices RxJS Operator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component#selectslices-rxjs-operator\"><i class=\"material-icons\">link</i></a></h4>\n<p>A flexible way to query one or many state slices.\nIt also considers late subscribers. </p>\n<p>An operator <code>selectSlices</code> to select a specific slice from the managed state.\nThis operator can be used to get slices from <code>this.lS$</code>.</p>\n<code-example language=\"typescript\">\nbuttons$ = this.lS.state$\n  .pipe(\n    selectChange(['<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>', 'substate'])\n  );\n</code-example>\n<p>Following things are done under the hood:</p>\n<ul>\n<li>it handles late subscribers with <code>shareReplay(1)</code> </li>\n<li>it only forwards distinct values</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/store-devtools/StoreDevtools#state\n - api/store/testing/MockSelector#selector\n - guide/component#included-primitives\n - guide/component#installation\n - guide/component#introduction\n - guide/component#let-structural-directive\n - guide/component#local-state-management\n - guide/component#ngrxcomponent\n - guide/component#observable-input-bindings\n - guide/component#observable-life-cycle-hooks\n - guide/component#observable-output-bindings\n - guide/component#push-pipe\n - guide/component#selectchanges-rxjs-operator\n - guide/component#selectslices-rxjs-operator\n - https://github.com/angular/angular/issues/31438\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component/index.md?message=docs%3A%20describe%20your%20change...\n - https://material.angular.io/\n - https://ngrx.io/\n-->"
}