{"version":3,"sources":["webpack:///./src/app/shared/copier.service.ts","webpack:///./src/app/custom-elements/code/code.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.component.ts.CodeComponent.html","webpack:///./src/app/custom-elements/code/code.component.ts","webpack:///./node_modules/rxjs/_esm2015/internal/util/Immediate.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/asap.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/cdk/esm2015/overlay.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.module.ts","webpack:///./node_modules/@angular/cdk/esm2015/layout.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/esm2015/snack-bar.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/pretty-printer.service.ts","webpack:///./node_modules/@angular/material/snack-bar/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/snack-bar/typings/index.d.ts.MatSnackBarContainer.html","webpack:///./node_modules/@angular/material/snack-bar/typings/index.d.ts.SimpleSnackBar.html","webpack:///./node_modules/@angular/cdk/esm2015/portal.js.pre-build-optimizer.js"],"names":["__webpack_require__","d","__webpack_exports__","CopierService","[object Object]","text","docElem","document","documentElement","isRTL","getAttribute","this","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","window","pageYOffset","scrollTop","top","setAttribute","value","body","appendChild","select","setSelectionRange","length","removeChild","createFake","execCommand","err","removeFake","RenderType_CodeComponent","View_CodeComponent_0","CodeComponentNgFactory","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_1__","_code_component__WEBPACK_IMPORTED_MODULE_2__","_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_3__","_pretty_printer_service__WEBPACK_IMPORTED_MODULE_4__","_shared_copier_service__WEBPACK_IMPORTED_MODULE_5__","_shared_logger_service__WEBPACK_IMPORTED_MODULE_6__","encapsulation","styles","data","View_CodeComponent_1","_l","_v","en","$event","ad","component","doCopy","_ck","ariaLabel","codeContainer","ngIf","hideCopy","language","View_CodeComponent_Host_0","linenums","path","region","header","codeFormatted","CodeComponent","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","DEFAULT_LINE_NUMS_COUNT","snackbar","pretty","copier","logger","code","_code","trim","formatDisplayedCode","showMissingCodeMessage","_header","leftAlignedCode","indent","Number","MAX_VALUE","lines","split","forEach","line","lineIndent","search","Math","min","map","substr","join","leftAlign","setCodeHtml","codeText","getCodeText","formatCode","getLinenums","pipe","Object","emit","subscribe","c","src","formattedCode","nativeElement","innerHTML","textContent","copyText","log","open","duration","error","Error","parseInt","isNaN","match","nextHandle","tasksByHandle","Immediate","cb","handle","Promise","resolve","then","runIfPresent","AsapAction_AsapAction","AsyncAction","scheduler","work","super","id","delay","requestAsyncId","actions","push","scheduled","setImmediate","flush","bind","recycleAsyncId","clearImmediate","undefined","AsapScheduler_AsapScheduler","AsyncScheduler","action","active","index","count","shift","execute","state","unsubscribe","asap","Overlay","OverlayContainer","OverlayKeyboardDispatcher","OverlayPositionBuilder","OverlayConfig","ScrollStrategyOptions","OverlayModule","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__","_angular_common__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_8__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_10__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_11__","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_document","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","classList","add","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","noop","close","config","block","reposition","ngInjectableDef","factory","token","providedIn","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","keys","k","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","_attachedOverlays","_keydownListener","event","overlays","i","_keydownEventSubscriptions","_keydownEvents","next","_isAttached","addEventListener","indexOf","splice","removeEventListener","_containerElement","parentNode","_createContainer","container","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_keydownEventsObservable","create","observer","subscription","attach","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","asObservable","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","complete","apply","strategy","sizeConfig","assign","dir","direction","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","children","boundingBoxClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_positionChangeSubscriptions","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","flexibleDimensions","growAfterOpen","canPush","isLocked","offset","selector","_transformOriginSelector","x","y","startX","_isRtl","endX","overlayStartX","overlayStartY","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getConfig","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","querySelectorAll","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","_getExactOverlayY","_getExactOverlayX","transformString","transform","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","dest","source","key","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","onPositionChange","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","slice","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","elementRef","nextUniqueId","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","_appRef","get","CodeModule","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_matchMedia","matchMedia","noopMatchMedia","query","WEBKIT","has","sheet","insertRule","e","console","createEmptyStyleRule","matches","media","addListener","removeListener","core","layout_BreakpointObserver","mediaMatcher","zone","_queries","Map","_destroySubject","Subject","splitQueries","coercion","mediaQuery","_registerQuery","mql","observables","observable","combineLatest","debounceTime","breakpointStates","response","breakpoints","queryListener","output","fromEventPattern","addHandler","removeHandler","resultSelector","args","isArray","Observable","subscriber","handler","retValue","isFunction","listener","takeUntil","startWith","nextMql","set","queries","a1","a2","concat","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","MatSnackBarModule","snack_bar_MatSnackBar","snack_bar_MatSnackBarContainer","MAT_SNACK_BAR_DATA","MatSnackBarConfig","snack_bar_MatSnackBarRef","SimpleSnackBar","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","dismissedByAction","_onEnter","politeness","announcementMessage","horizontalPosition","verticalPosition","snackBarRef","hasAction","esm2015_portal","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_assertNotAttached","_applySnackBarClasses","attachComponentPortal","attachTemplatePortal","fromState","toState","_completeExit","onEnter","detectChanges","onMicrotaskEmpty","take","panelClasses","Array","MAT_SNACK_BAR_DEFAULT_OPTIONS","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","_attach","template","message","openFromComponent","injector","viewContainerRef","WeakMap","containerPortal","containerRef","instance","content","userConfig","_createOverlay","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","detachments","state$$1","_animateSnackBar","afterDismissed","enter","afterOpened","_dismissAfter","announce","global","isLeft","isRight","centerHorizontally","a11y","PrettyPrinter","rxjs__WEBPACK_IMPORTED_MODULE_0__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","prettyPrintOne","getPrettyPrintOne","ppo","t","msg","MatSnackBarContainerNgFactory","SimpleSnackBarNgFactory","_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_1__","_angular_common__WEBPACK_IMPORTED_MODULE_3__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__","_angular_material_button__WEBPACK_IMPORTED_MODULE_10__","_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_12__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_13__","RenderType_MatSnackBarContainer","animation","type","name","definitions","opacity","options","expr","timings","View_MatSnackBarContainer_1","View_MatSnackBarContainer_0","View_MatSnackBarContainer_Host_0","onAnimationEnd","RenderType_SimpleSnackBar","View_SimpleSnackBar_1","_co","disabled","_animationMode","View_SimpleSnackBar_0","View_SimpleSnackBar_Host_0","ComponentPortal","TemplatePortal","BasePortalOutlet","DomPortalOutlet","CdkPortal","CdkPortalOutlet","PortalModule","PortalInjector","throwPortalAlreadyAttachedError","Portal","throwNullPortalOutletError","_attachedHost","throwNoPortalAttachedError","componentFactoryResolver","context","templateRef","_attachedPortal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","setAttachedHost","_invokeDisposeFn","fn","_disposeFn","outletElement","_defaultInjector","componentFactory","resolveComponentFactory","componentRef","createComponent","setDisposeFn","destroy","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","rootNode","_viewContainerRef","_isInitialized","attached","attachedRef","_attachedRef","ref","clear","_parentInjector","_customTokens","notFoundValue"],"mappings":"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","file":"default~code-code-example-module-ngfactory~code-code-tabs-module-ngfactory.5000722bcaff53fab9fe.js","sourcesContent":["/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\nexport class CopierService {\n  private fakeElem: HTMLTextAreaElement | null;\n\n  /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n  createFake(text: string) {\n    const docElem = document.documentElement!;\n    const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n    // Create a fake element to hold the contents to copy\n    this.fakeElem = document.createElement('textarea');\n\n    // Prevent zooming on iOS\n    this.fakeElem.style.fontSize = '12pt';\n\n    // Reset box model\n    this.fakeElem.style.border = '0';\n    this.fakeElem.style.padding = '0';\n    this.fakeElem.style.margin = '0';\n\n    // Move element out of screen horizontally\n    this.fakeElem.style.position = 'absolute';\n    this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n    // Move element to the same position vertically\n    const yPosition = window.pageYOffset || docElem.scrollTop;\n    this.fakeElem.style.top = yPosition + 'px';\n\n    this.fakeElem.setAttribute('readonly', '');\n    this.fakeElem.value = text;\n\n    document.body.appendChild(this.fakeElem);\n\n    this.fakeElem.select();\n    this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n  }\n\n  removeFake() {\n    if (this.fakeElem) {\n      document.body.removeChild(this.fakeElem);\n      this.fakeElem = null;\n    }\n  }\n\n  copyText(text: string) {\n    try {\n      this.createFake(text);\n      return document.execCommand('copy');\n    } catch (err) {\n      return false;\n    } finally {\n      this.removeFake();\n    }\n  }\n}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./code.component\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"./pretty-printer.service\";\nimport * as i5 from \"../../shared/copier.service\";\nimport * as i6 from \"../../shared/logger.service\";\nvar styles_CodeComponent = [];\nvar RenderType_CodeComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_CodeComponent, data: {} });\nexport { RenderType_CodeComponent as RenderType_CodeComponent };\nfunction View_CodeComponent_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 4, \"button\", [[\"class\", \"material-icons copy-button no-print\"], [\"title\", \"Copy code snippet\"]], [[1, \"aria-label\", 0]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.doCopy() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵeld(2, 0, null, null, 1, \"span\", [[\"aria-hidden\", \"true\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"content_copy\"])), (_l()(), i0.ɵted(-1, null, [\"\\n      \"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.ariaLabel; _ck(_v, 0, 0, currVal_0); }); }\nexport function View_CodeComponent_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { codeContainer: 0 }), (_l()(), i0.ɵeld(1, 0, null, null, 6, \"pre\", [], [[8, \"className\", 0]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"      \"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_CodeComponent_1)), i0.ɵdid(4, 16384, null, 0, i1.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵeld(6, 0, [[1, 0], [\"codeContainer\", 1]], null, 0, \"code\", [[\"class\", \"animated fadeIn\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n    \"]))], function (_ck, _v) { var _co = _v.component; var currVal_1 = !_co.hideCopy; _ck(_v, 4, 0, currVal_1); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = i0.ɵinlineInterpolate(1, \"prettyprint lang-\", _co.language, \"\"); _ck(_v, 1, 0, currVal_0); }); }\nexport function View_CodeComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"aio-code\", [], null, null, null, View_CodeComponent_0, RenderType_CodeComponent)), i0.ɵdid(1, 573440, null, 0, i2.CodeComponent, [i3.MatSnackBar, i4.PrettyPrinter, i5.CopierService, i6.Logger], null, null)], null, null); }\nvar CodeComponentNgFactory = i0.ɵccf(\"aio-code\", i2.CodeComponent, View_CodeComponent_Host_0, { hideCopy: \"hideCopy\", language: \"language\", linenums: \"linenums\", path: \"path\", region: \"region\", header: \"header\" }, { codeFormatted: \"codeFormatted\" }, []);\nexport { CodeComponentNgFactory as CodeComponentNgFactory };\n","\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    ","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `,\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string {\n    return this._code;\n  }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string {\n    return this._header;\n  }\n  private _header: string;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer') codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger\n  ) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n      .formatCode(\n        leftAlignedCode,\n        this.language,\n        this.getLinenums(leftAlignedCode)\n      )\n      .pipe(tap(() => this.codeFormatted.emit()))\n      .subscribe(\n        c => this.setCodeHtml(c),\n        err => {\n          /* ignore failure to format */\n        }\n      );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path\n      ? this.path + (this.region ? '#' + this.region : '')\n      : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(\n      `<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`\n    );\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(\n        new Error(`ERROR copying code to clipboard: \"${code}\"`)\n      );\n      this.snackbar.open('Copy failed. Please try again!', '', {\n        duration: 800,\n      });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums(code: string) {\n    const linenums =\n      typeof this.linenums === 'boolean'\n        ? this.linenums\n        : this.linenums === 'true'\n          ? true\n          : this.linenums === 'false'\n            ? false\n            : typeof this.linenums === 'string'\n              ? parseInt(this.linenums, 10)\n              : this.linenums;\n\n    // if no linenums, enable line numbers if more than one line\n    return linenums == null || isNaN(linenums as number)\n      ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT\n      : linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines\n    .map(line => line.substr(indent))\n    .join('\\n')\n    .trim();\n}\n","let nextHandle = 1;\nconst tasksByHandle = {};\nfunction runIfPresent(handle) {\n    const cb = tasksByHandle[handle];\n    if (cb) {\n        cb();\n    }\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        tasksByHandle[handle] = cb;\n        Promise.resolve().then(() => runIfPresent(handle));\n        return handle;\n    },\n    clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    },\n};\n//# sourceMappingURL=Immediate.js.map","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n//# sourceMappingURL=AsapAction.js.map","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this.active = true;\n        this.scheduled = undefined;\n        const { actions } = this;\n        let error;\n        let index = -1;\n        let count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n//# sourceMappingURL=AsapScheduler.js.map","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asap = new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} document\n     */\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    attach() { }\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    enable() {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            const root = /** @type {?} */ ((this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    disable() {\n        if (this._isEnabled) {\n            /** @type {?} */\n            const html = /** @type {?} */ ((this._document.documentElement));\n            /** @type {?} */\n            const body = /** @type {?} */ ((this._document.body));\n            /** @type {?} */\n            const htmlStyle = /** @type {?} */ (html.style);\n            /** @type {?} */\n            const bodyStyle = /** @type {?} */ (body.style);\n            /** @type {?} */\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _canBeEnabled() {\n        /** @type {?} */\n        const html = /** @type {?} */ ((this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        const body = this._document.body;\n        /** @type {?} */\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                /** @type {?} */\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > /** @type {?} */ ((/** @type {?} */ ((this._config)).threshold))) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    enable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    disable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    attach() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        /** @type {?} */\n        const outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        const outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        const outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        /** @type {?} */\n        const clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        const clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    /** @type {?} */\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    /** @type {?} */\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?} document\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /**\n         * Block scrolling.\n         */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = defineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            Object.keys(config).forEach(k => {\n                /** @type {?} */\n                const key = /** @type {?} */ (k);\n                if (typeof config[key] !== 'undefined') {\n                    this[key] = config[key];\n                }\n            });\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @param {?=} panelClass\n     */\n    constructor(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nclass ScrollingVisibility {\n}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    constructor(connectionPair, /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (event) => {\n            /** @type {?} */\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    remove(overlayRef) {\n        /** @type {?} */\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(inject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        /** @type {?} */ ((\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        this._document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    _createContainer() {\n        /** @type {?} */\n        const container = this._document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayContainer.ngInjectableDef = defineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(inject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        /** @type {?} */ (DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ) // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalOutlet\n     * @param {?} _host\n     * @param {?} _pane\n     * @param {?} _config\n     * @param {?} _ngZone\n     * @param {?} _keyboardDispatcher\n     * @param {?} _document\n     * @param {?=} _location\n     */\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._keydownEventsObservable = Observable.create((observer) => {\n            /** @type {?} */\n            const subscription = this._keydownEvents.subscribe(observer);\n            this._keydownEventSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._keydownEventSubscriptions--;\n            };\n        });\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /**\n     * The overlay's HTML element\n     * @return {?}\n     */\n    get overlayElement() {\n        return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    attach(portal) {\n        /** @type {?} */\n        let attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        /** @type {?} */\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        /** @type {?} */\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = /** @type {?} */ ((null));\n        }\n        this._previousHostParent = this._pane = /** @type {?} */ ((null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    updateSize(sizeConfig) {\n        this._config = Object.assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    setDirection(dir) {\n        this._config = Object.assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    getDirection() {\n        /** @type {?} */\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    _updateElementSize() {\n        /** @type {?} */\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    _attachBackdrop() {\n        /** @type {?} */\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        } /** @type {?} */\n        ((\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', (event) => this._backdropClick.next(event));\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            /** @type {?} */ ((this._host.parentNode)).appendChild(this._host);\n        }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    detachBackdrop() {\n        /** @type {?} */\n        let backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            /** @type {?} */\n            let timeoutId;\n            /** @type {?} */\n            let finishDetach = () => {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (this._backdropElement == backdropToDetach) {\n                    this._backdropElement = null;\n                }\n                clearTimeout(timeoutId);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                /** @type {?} */ ((backdropToDetach)).addEventListener('transitionend', finishDetach);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n        }\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _toggleClasses(element, cssClasses, isAdd) {\n        /** @type {?} */\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @return {?}\n     */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            /** @type {?} */\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Class to be added to the overlay bounding box.\n  @type {?} */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /**\n     * @param {?} connectedTo\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Amount of subscribers to the `positionChanges` stream.\n         */\n        this._positionChangeSubscriptions = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = Observable.create((observer) => {\n            /** @type {?} */\n            const subscription = this._positionChanges.subscribe(observer);\n            this._positionChangeSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._positionChangeSubscriptions--;\n            };\n        });\n        this.setOrigin(connectedTo);\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const originRect = this._originRect;\n        /** @type {?} */\n        const overlayRect = this._overlayRect;\n        /** @type {?} */\n        const viewportRect = this._viewportRect;\n        /** @type {?} */\n        const flexibleFits = [];\n        /** @type {?} */\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            /** @type {?} */\n            let originPoint = this._getOriginPoint(originRect, pos);\n            /** @type {?} */\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            /** @type {?} */\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            let bestFit = null;\n            /** @type {?} */\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                /** @type {?} */\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(/** @type {?} */ ((bestFit)).position, /** @type {?} */ ((bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, /** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            }));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this.scrollables = scrollables;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(/** @type {?} */ ((this._lastPosition))) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    setOrigin(origin) {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOriginPoint(originRect, pos) {\n        /** @type {?} */\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        /** @type {?} */\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        /** @type {?} */\n        let leftOverflow = 0 - x;\n        /** @type {?} */\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        let topOverflow = 0 - y;\n        /** @type {?} */\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        /** @type {?} */\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            const availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            const availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            const minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        /** @type {?} */\n        let pushX = 0;\n        /** @type {?} */\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width < viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height < viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            /** @type {?} */\n            const scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        const elements = /** @type {?} */ ((this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        let xOrigin;\n        /** @type {?} */\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        let height;\n        /** @type {?} */\n        let top;\n        /** @type {?} */\n        let bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        /** @type {?} */\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        /** @type {?} */\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        let width;\n        /** @type {?} */\n        let left;\n        /** @type {?} */\n        let right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: /** @type {?} */ ((top)), left: /** @type {?} */ ((left)), bottom: /** @type {?} */ ((bottom)), right: /** @type {?} */ ((right)), width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    _setBoundingBoxStyles(origin, position) {\n        /** @type {?} */\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        const styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    _resetBoundingBoxStyles() {\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, /** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        }));\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, /** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n        }));\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    _setOverlayElementStyles(originPoint, position) {\n        /** @type {?} */\n        const styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        /** @type {?} */\n        let transformString = '';\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        /** @type {?} */\n        let styles = /** @type {?} */ ({ top: null, bottom: null });\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let virtualKeyboardOffset = this._overlayContainer ?\n            this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            /** @type {?} */\n            const documentHeight = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        /** @type {?} */\n        let styles = /** @type {?} */ ({ left: null, right: null });\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            const documentWidth = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    _getScrollVisibility() {\n        /** @type {?} */\n        const originBounds = this._origin.getBoundingClientRect();\n        /** @type {?} */\n        const overlayBounds = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const scrollContainerBounds = this.scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    _getNarrowedViewportRect() {\n        /** @type {?} */\n        const width = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        const height = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @return {?}\n     */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => this._pane.classList.remove(cssClass));\n            this._appliedPanelClasses = [];\n        }\n    }\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    /**\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?} connectedTo\n     * @param {?} viewportRuler\n     * @param {?} document\n     * @param {?=} platform\n     */\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, \n    // @breaking-change 8.0.0 `platform` parameter to be made required.\n    platform) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Class to be added to the overlay pane wrapper.\n  @type {?} */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        /** @type {?} */\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        const config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(_viewportRuler, _document, \n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    flexibleConnectedTo(elementRef) {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform, decorators: [{ type: Optional }] },\n    { type: OverlayContainer, decorators: [{ type: Optional }] }\n];\n/** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = defineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Next overlay unique ID.\n  @type {?} */\nlet nextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _keyboardDispatcher\n     * @param {?} _injector\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?} _directionality\n     * @param {?=} _location\n     */\n    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    create(config) {\n        /** @type {?} */\n        const host = this._createHostElement();\n        /** @type {?} */\n        const pane = this._createPaneElement(host);\n        /** @type {?} */\n        const portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(host) {\n        /** @type {?} */\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    _createHostElement() {\n        /** @type {?} */\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\nOverlay.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n  @type {?} */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** *\n * Injection token that determines the scroll handling while the connected overlay is open.\n  @type {?} */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin',\n            },] },\n];\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} scrollStrategyFactory\n     * @param {?} _dir\n     */\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the x-axis\n     * @return {?}\n     */\n    get offsetX() { return this._offsetX; }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n    get offsetY() { return this._offsetY; }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n    get lockPosition() { return this._lockPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n    get growAfterOpen() { return this._growAfterOpen; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n    get push() { return this._push; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyOverlay();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE) {\n                this._detachOverlay();\n            }\n        });\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    _buildConfig() {\n        /** @type {?} */\n        const positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _updatePositionStrategy(positionStrategy) {\n        /** @type {?} */\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    _createPositionStrategy() {\n        /** @type {?} */\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n        return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            },] },\n];\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }]\n};\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass OverlayModule {\n}\nOverlayModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ],\n            },] },\n];\n/** *\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        super(_document);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    /**\n     * @return {?}\n     */\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        const fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    _addFullscreenChangeListener(fn) {\n        /** @type {?} */\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    getFullscreenElement() {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (/** @type {?} */ (this._document)).mozFullScreenElement ||\n            (/** @type {?} */ (this._document)).msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n//# sourceMappingURL=overlay.js.map\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  entryComponents: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, defineInjectable, inject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { asapScheduler, combineLatest, fromEventPattern, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass LayoutModule {\n}\nLayoutModule.decorators = [\n    { type: NgModule },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Global registry for all dynamically-created, injected media queries.\n  @type {?} */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** *\n * Style tag that holds all of the dynamically-created media queries.\n  @type {?} */\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nclass MediaMatcher {\n    /**\n     * @param {?} platform\n     */\n    constructor(platform) {\n        this.platform = platform;\n        this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    matchMedia(query) {\n        if (this.platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ MediaMatcher.ngInjectableDef = defineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(inject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css'); /** @type {?} */\n            ((document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            (/** @type {?} */ (mediaQueryStyleNode.sheet))\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return /** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nclass BreakpointObserver {\n    /**\n     * @param {?} mediaMatcher\n     * @param {?} zone\n     */\n    constructor(mediaMatcher, zone) {\n        this.mediaMatcher = mediaMatcher;\n        this.zone = zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    isMatched(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    observe(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        return combineLatest(observables).pipe(debounceTime(0, asapScheduler), map((breakpointStates) => {\n            /** @type {?} */\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach((state) => {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            });\n            return response;\n        }));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @param {?} query\n     * @return {?}\n     */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return /** @type {?} */ ((this._queries.get(query)));\n        }\n        /** @type {?} */\n        const mql = this.mediaMatcher.matchMedia(query);\n        /** @type {?} */\n        let queryListener;\n        /** @type {?} */\n        const queryObservable = fromEventPattern(\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        (listener) => {\n            queryListener = (e) => this.zone.run(() => listener(e));\n            mql.addListener(queryListener);\n        }, () => mql.removeListener(queryListener))\n            .pipe(takeUntil(this._destroySubject), startWith(mql), map((nextMql) => ({ query, matches: nextMql.matches })));\n        /** @type {?} */\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/** @nocollapse */ BreakpointObserver.ngInjectableDef = defineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(inject(MediaMatcher), inject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((query) => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n  @type {?} */\nconst Breakpoints = {\n    XSmall: '(max-width: 599px)',\n    Small: '(min-width: 600px) and (max-width: 959px)',\n    Medium: '(min-width: 960px) and (max-width: 1279px)',\n    Large: '(min-width: 1280px) and (max-width: 1919px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599px) and (orientation: portrait), ' +\n        '(max-width: 959px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };\n//# sourceMappingURL=layout.js.map\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n    return new Observable(subscriber => {\n        const handler = (...e) => subscriber.next(e.length === 1 ? e[0] : e);\n        let retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return () => removeHandler(handler, retValue);\n    });\n}\n//# sourceMappingURL=fromEventPattern.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to access the data that was passed in to a snack bar.\n  @type {?} */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.decorators = [\n    { type: Component, args: [{selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar',\n                }\n            },] },\n];\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Animations used by the Material snack bar.\n * \\@docs-private\n  @type {?} */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.decorators = [\n    { type: Component, args: [{selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    'role': 'alert',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n            },] },\n];\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet,] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to specify default snack bar.\n  @type {?} */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return /** @type {?} */ (this._attach(component, config));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, /** @type {?} */ ((null)), /** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            }));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(state$$1 => {\n            if (state$$1.matches) {\n                overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n            }\n            else {\n                overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n            }\n        });\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(/** @type {?} */ ((config.duration))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.decorators = [\n    { type: Injectable, args: [{ providedIn: MatSnackBarModule },] },\n];\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = defineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n//# sourceMappingURL=snack-bar.js.map\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // prettify.js is not in window global; load it with webpack loader\n      import('assets/js/prettify.js')\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/cdk/overlay\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/cdk/bidi\";\nimport * as i5 from \"@angular/cdk/portal\";\nimport * as i6 from \"@angular/cdk/platform\";\nimport * as i7 from \"@angular/cdk/scrolling\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/platform-browser\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"../../button/typings/index.ngfactory\";\nimport * as i12 from \"@angular/cdk/a11y\";\nimport * as i13 from \"@angular/platform-browser/animations\";\nvar MatSnackBarModuleNgFactory = i0.ɵcmf(i1.MatSnackBarModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [MatSnackBarContainerNgFactory, SimpleSnackBarNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.Overlay, i2.Overlay, [i2.ScrollStrategyOptions, i2.OverlayContainer, i0.ComponentFactoryResolver, i2.OverlayPositionBuilder, i2.OverlayKeyboardDispatcher, i0.Injector, i0.NgZone, i3.DOCUMENT, i4.Directionality, [2, i3.Location]]), i0.ɵmpd(5120, i2.ɵc, i2.ɵd, [i2.Overlay]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i4.BidiModule, i4.BidiModule, []), i0.ɵmpd(1073742336, i5.PortalModule, i5.PortalModule, []), i0.ɵmpd(1073742336, i6.PlatformModule, i6.PlatformModule, []), i0.ɵmpd(1073742336, i7.ScrollingModule, i7.ScrollingModule, []), i0.ɵmpd(1073742336, i2.OverlayModule, i2.OverlayModule, []), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i8.MatCommonModule, i8.MatCommonModule, [[2, i8.MATERIAL_SANITY_CHECKS], [2, i9.HAMMER_LOADER]]), i0.ɵmpd(1073742336, i8.MatRippleModule, i8.MatRippleModule, []), i0.ɵmpd(1073742336, i10.MatButtonModule, i10.MatButtonModule, []), i0.ɵmpd(1073742336, i1.MatSnackBarModule, i1.MatSnackBarModule, [])]); });\nexport { MatSnackBarModuleNgFactory as MatSnackBarModuleNgFactory };\nvar styles_MatSnackBarContainer = [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"];\nvar RenderType_MatSnackBarContainer = i0.ɵcrt({ encapsulation: 2, styles: styles_MatSnackBarContainer, data: { \"animation\": [{ type: 7, name: \"state\", definitions: [{ type: 0, name: \"void, hidden\", styles: { type: 6, styles: { transform: \"scale(0.8)\", opacity: 0 }, offset: null }, options: undefined }, { type: 0, name: \"visible\", styles: { type: 6, styles: { transform: \"scale(1)\", opacity: 1 }, offset: null }, options: undefined }, { type: 1, expr: \"* => visible\", animation: { type: 4, styles: null, timings: \"150ms cubic-bezier(0, 0, 0.2, 1)\" }, options: null }, { type: 1, expr: \"* => void, * => hidden\", animation: { type: 4, styles: { type: 6, styles: { opacity: 0 }, offset: null }, timings: \"75ms cubic-bezier(0.4, 0.0, 1, 1)\" }, options: null }], options: {} }] } });\nexport { RenderType_MatSnackBarContainer as RenderType_MatSnackBarContainer };\nfunction View_MatSnackBarContainer_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nexport function View_MatSnackBarContainer_0(_l) { return i0.ɵvid(2, [i0.ɵqud(402653184, 1, { _portalOutlet: 0 }), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSnackBarContainer_1)), i0.ɵdid(2, 212992, [[1, 4]], 0, i5.CdkPortalOutlet, [i0.ComponentFactoryResolver, i0.ViewContainerRef], { portal: [0, \"portal\"] }, null)], function (_ck, _v) { var currVal_0 = \"\"; _ck(_v, 2, 0, currVal_0); }, null); }\nexport function View_MatSnackBarContainer_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"snack-bar-container\", [[\"class\", \"mat-snack-bar-container\"], [\"role\", \"alert\"]], [[40, \"@state\", 0]], [[\"component\", \"@state.done\"]], function (_v, en, $event) { var ad = true; if ((\"component:@state.done\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 1).onAnimationEnd($event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, View_MatSnackBarContainer_0, RenderType_MatSnackBarContainer)), i0.ɵdid(1, 180224, null, 0, i1.MatSnackBarContainer, [i0.NgZone, i0.ElementRef, i0.ChangeDetectorRef, i1.MatSnackBarConfig], null, null)], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1)._animationState; _ck(_v, 0, 0, currVal_0); }); }\nvar MatSnackBarContainerNgFactory = i0.ɵccf(\"snack-bar-container\", i1.MatSnackBarContainer, View_MatSnackBarContainer_Host_0, {}, {}, []);\nexport { MatSnackBarContainerNgFactory as MatSnackBarContainerNgFactory };\nvar styles_SimpleSnackBar = [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"];\nvar RenderType_SimpleSnackBar = i0.ɵcrt({ encapsulation: 2, styles: styles_SimpleSnackBar, data: {} });\nexport { RenderType_SimpleSnackBar as RenderType_SimpleSnackBar };\nfunction View_SimpleSnackBar_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"div\", [[\"class\", \"mat-simple-snackbar-action\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 2, \"button\", [[\"mat-button\", \"\"]], [[8, \"disabled\", 0], [2, \"_mat-animation-noopable\", null]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.action() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, i11.View_MatButton_0, i11.RenderType_MatButton)), i0.ɵdid(2, 180224, null, 0, i10.MatButton, [i0.ElementRef, i6.Platform, i12.FocusMonitor, [2, i13.ANIMATION_MODULE_TYPE]], null, null), (_l()(), i0.ɵted(3, 0, [\"\", \"\"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (i0.ɵnov(_v, 2).disabled || null); var currVal_1 = (i0.ɵnov(_v, 2)._animationMode === \"NoopAnimations\"); _ck(_v, 1, 0, currVal_0, currVal_1); var currVal_2 = _co.data.action; _ck(_v, 3, 0, currVal_2); }); }\nexport function View_SimpleSnackBar_0(_l) { return i0.ɵvid(2, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"span\", [], null, null, null, null, null)), (_l()(), i0.ɵted(1, null, [\"\", \"\"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_SimpleSnackBar_1)), i0.ɵdid(3, 16384, null, 0, i3.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_1 = _co.hasAction; _ck(_v, 3, 0, currVal_1); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.data.message; _ck(_v, 1, 0, currVal_0); }); }\nexport function View_SimpleSnackBar_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"simple-snack-bar\", [[\"class\", \"mat-simple-snackbar\"]], null, null, null, View_SimpleSnackBar_0, RenderType_SimpleSnackBar)), i0.ɵdid(1, 49152, null, 0, i1.SimpleSnackBar, [i1.MatSnackBarRef, i1.MAT_SNACK_BAR_DATA], null, null)], null, null); }\nvar SimpleSnackBarNgFactory = i0.ɵccf(\"simple-snack-bar\", i1.SimpleSnackBar, View_SimpleSnackBar_Host_0, {}, {}, []);\nexport { SimpleSnackBarNgFactory as SimpleSnackBarNgFactory };\n","<ng-template cdkPortalOutlet></ng-template>","<span>{{data.message}}</span><div class=\"mat-simple-snackbar-action\" *ngIf=\"hasAction\"><button mat-button (click)=\"action()\">{{data.action}}</button></div>","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        this.setDisposeFn((() => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-portal], [cdkPortal], [portal]',\n                exportAs: 'cdkPortal',\n            },] },\n];\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        this.attached = new EventEmitter();\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n}\nCdkPortalOutlet.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                inputs: ['portal: cdkPortalOutlet']\n            },] },\n];\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\nclass PortalModule {\n}\nPortalModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [CdkPortal, CdkPortalOutlet],\n                declarations: [CdkPortal, CdkPortalOutlet],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n//# sourceMappingURL=portal.js.map\n"],"sourceRoot":""}