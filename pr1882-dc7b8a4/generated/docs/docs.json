{
  "id": "docs",
  "title": "What is NgRx?",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/marketing/docs.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 class=\"no-toc\" id=\"what-is-ngrx\">What is NgRx?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#what-is-ngrx\"><i class=\"material-icons\">link</i></a></h1>\n<p>NgRx is a framework for building reactive applications in Angular. NgRx provides state management, isolation of side effects, entity collection management, router bindings, code generation, and developer tools that enhance developers experience when building many different types of applications.</p>\n<h2 id=\"why-ngrx\">Why NgRx?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#why-ngrx\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgRx is built for creating maintainable explicit applications, by encouraging the use of actions in order to express state changes.</p>\n<p>If you're building an application that has a lot of user interaction, many different event sources that's where NgRx is going to really shine in your application.</p>\n<h3 id=\"serializability\">Serializability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#serializability\"><i class=\"material-icons\">link</i></a></h3>\n<p>By normalizing state changes and pass them through observables NgRx provides serializability and good control of the application. This enables to save and serialize states to the <code>localStorage</code> or any other external storage.\nIn addition, it also allows to inspect, download, upload, and dispatch actions, all from the <a href=\"guide/store-devtools\">Store Devtools</a>.</p>\n<h3 id=\"type-safety\">Type Safety<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#type-safety\"><i class=\"material-icons\">link</i></a></h3>\n<p>NgRx is completely written in TypeScript.\nIn NgRx, <code>reducers</code>, <code>selectors</code>, and <code>actions</code> are written in a specific way  get as much of type safety out of the TypeScript compiler as possible.</p>\n<h3 id=\"encapsulation\">Encapsulation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#encapsulation\"><i class=\"material-icons\">link</i></a></h3>\n<p>Using Ngrx <a href=\"guide/effects\">Effects</a> and <a href=\"guide/store\">Store</a>,  any interaction with external resources side effects, like network requests, web socket and any business logic can be isolated from the UI. This isolation allows for more pure and simple components, and keep the single responsibility principle.</p>\n<h3 id=\"testable\">Testable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#testable\"><i class=\"material-icons\">link</i></a></h3>\n<p>Since NgRx is mostly based on pure functions like selectors and reducers, plus the ability to isolate side effects from the UI, testing becomes very straightforward.\nNgRx also provides tests setup like <code><a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a></code> and <code><a href=\"api/effects/testing/provideMockActions\" class=\"code-anchor\">provideMockActions</a></code> for better test experience.</p>\n<h3 id=\"performance\">Performance<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#performance\"><i class=\"material-icons\">link</i></a></h3>\n<p>NgRx is built on immutable data structures, making change detection turn into a very easy task, which means <code>OnPush</code> strategy becomes available.\nNgRx is also powered by memoized selector functions which optimize any state queries computation.</p>\n<h3 id=\"sharing-data-between-modules\">Sharing Data Between Modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#sharing-data-between-modules\"><i class=\"material-icons\">link</i></a></h3>\n<p>In NgRx, the state tree is the single source of truth of the application. Once data is stored, it becomes available within every module in the application.</p>\n<h2 id=\"core-principles\">Core Principles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#core-principles\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>State is a single, immutable data structure.</li>\n<li>Components delegate responsibilities to side effects, which are handled in isolation.</li>\n<li>Type-safety is promoted throughout the architecture with reliance on TypeScript's compiler for program correctness.</li>\n<li>Actions and state are serializable to ensure state is predictably stored, rehydrated, and replayed.</li>\n<li>Promotes the use of functional programming when building reactive applications.</li>\n<li>Provide straightforward testing strategies for validation of functionality.</li>\n</ul>\n<h2 id=\"packages\">Packages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"docs#packages\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"guide/store\">Store</a> - RxJS powered state management for Angular apps, inspired by Redux.</li>\n<li><a href=\"guide/store-devtools\">Store Devtools</a> - Instrumentation for @ngrx/store enabling time-travel debugging.</li>\n<li><a href=\"guide/effects\">Effects</a> - Side effect model for @ngrx/store.</li>\n<li><a href=\"guide/router-store\">Router Store</a> - Bindings to connect the Angular Router to @ngrx/store.</li>\n<li><a href=\"guide/entity\">Entity</a> - Entity State adapter for managing record collections.</li>\n<li><a href=\"guide/data\">NgRx Data</a> - Extension for simplified entity data management.</li>\n<li><a href=\"guide/schematics\">Schematics</a> - Scaffolding library for Angular applications using NgRx libraries.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/entity\n-->\n<!-- links from this doc:\n - api/effects/testing/provideMockActions\n - api/store/testing/provideMockStore\n - docs#core-principles\n - docs#encapsulation\n - docs#packages\n - docs#performance\n - docs#serializability\n - docs#sharing-data-between-modules\n - docs#testable\n - docs#type-safety\n - docs#what-is-ngrx\n - docs#why-ngrx\n - guide/data\n - guide/effects\n - guide/entity\n - guide/router-store\n - guide/schematics\n - guide/store\n - guide/store-devtools\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/marketing/docs.md?message=docs%3A%20describe%20your%20change...\n-->"
}