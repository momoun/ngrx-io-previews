{
  "id": "guide/effects/lifecycle",
  "title": "Lifecycle",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/lifecycle.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"lifecycle\">Lifecycle<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#lifecycle\"><i class=\"material-icons\">link</i></a></h1>\n<h3 id=\"root_effects_init\">ROOT_EFFECTS_INIT<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#root_effects_init\"><i class=\"material-icons\">link</i></a></h3>\n<p>After all the root effects have been added, the root effect dispatches a <code><a href=\"api/effects/ROOT_EFFECTS_INIT\" class=\"code-anchor\">ROOT_EFFECTS_INIT</a></code> action.\nYou can see this action as a lifecycle hook, which you can use in order to execute some code after all your root effects have been added.</p>\n<code-example header=\"init.effects.ts\">\ninit$ = <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>(() => \n  this.actions$.pipe(\n    <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>(<a href=\"api/effects/ROOT_EFFECTS_INIT\" class=\"code-anchor\">ROOT_EFFECTS_INIT</a>),\n    map(action => ...)\n  )\n);\n</code-example>\n<h2 id=\"effect-metadata\">Effect Metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#effect-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"non-dispatching-effects\">Non-dispatching Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#non-dispatching-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>Sometimes you don't want effects to dispatch an action, for example when you only want to log or navigate based on an incoming action. But when an effect does not dispatch another action, the browser will crash because the effect is both 'subscribing' to and 'dispatching' the exact same action, causing an infinite loop. To prevent this, add <code>{ dispatch: false }</code> to the <code><a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a></code> function as the second argument.</p>\n<p>Usage:</p>\n<code-example header=\"log.effects.ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a> } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LogEffects {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n  \n  logActions$ = <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>(() =>\n    this.actions$.pipe(\n      tap(action => console.log(action))\n    ), { dispatch: false });\n}\n</code-example>\n<h3 id=\"resubscribe-on-error\">Resubscribe on Error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#resubscribe-on-error\"><i class=\"material-icons\">link</i></a></h3>\n<p>Starting from NgRx V8 when error happens in the effect's main stream it is\nreported using Angular's <code>ErrorHandler</code> and the source effect is\n<strong>automatically</strong> resubscribe (instead of completeling), so it continues to\nlisten to any new dispatched Actions.</p>\n<p>Generally, errors should be handled by users and operators such as <code><a href=\"api/effects/mapToAction\" class=\"code-anchor\">mapToAction</a></code>\nshould make it easier to do. However, for the cases where errors were missed,\nthis new behavior adds additional safety net.</p>\n<p>In some cases where particular RxJS operators are used the new behavior might\nproduce unexpected results. For example, if the <code>startWith</code> operator is within\neffect's pipe then it will be triggered again.</p>\n<p>To remove resubscriptions add <code>{resubscribeOnError: false}</code> to <code><a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a></code>\nmetadata (second argument).</p>\n<code-example header=\"disable-resubscribe.effects.ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a> } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorFreeEffects {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n  \n  disabledResubscriptionsActions$ = <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>(() =>\n    this.actions$.pipe(\n      tap(action => console.log(action))\n    ), { resubscribeOnError: false });\n}\n</code-example>\n<h2 id=\"controlling-effects\">Controlling Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#controlling-effects\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"oniniteffects\">OnInitEffects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#oniniteffects\"><i class=\"material-icons\">link</i></a></h3>\n<p>Implement this interface to dispatch a custom action after the effect has been added.\nYou can listen to this action in the rest of the application to execute something after the effect is registered.</p>\n<p>Usage:</p>\n<code-example header=\"user.effects.ts\">\nclass UserEffects implements <a href=\"api/effects/OnInitEffects\" class=\"code-anchor\">OnInitEffects</a> {\n  ngrxOnInitEffects(): <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n    return { type: '[UserEffects]: Init' };\n  }\n}\n</code-example>\n<h3 id=\"onruneffects\">OnRunEffects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#onruneffects\"><i class=\"material-icons\">link</i></a></h3>\n<p>By default, effects are merged and subscribed to the store. Implement the <code><a href=\"api/effects/OnRunEffects\" class=\"code-anchor\">OnRunEffects</a></code> interface to control the lifecycle of the resolved effects.</p>\n<p>Usage:</p>\n<code-example header=\"user.effects.ts\">\nimport { Injectable } from '@angular/core';\nimport {\n  <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>,\n  <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>,\n  <a href=\"api/effects/OnRunEffects\" class=\"code-anchor\">OnRunEffects</a>,\n  <a href=\"api/effects/EffectNotification\" class=\"code-anchor\">EffectNotification</a>,\n  <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>,\n} from '@ngrx/effects';\nimport { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { exhaustMap, takeUntil, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UserEffects implements <a href=\"api/effects/OnRunEffects\" class=\"code-anchor\">OnRunEffects</a> {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  updateUser$ = <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>(() =>\n    this.actions$.pipe(\n      <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>('UPDATE_USER'),\n      tap(action => {\n        console.log(action);\n      })\n    ),\n  { dispatch: false });\n\n  <a href=\"api/effects/OnRunEffects#ngrxOnRunEffects\" class=\"code-anchor\">ngrxOnRunEffects</a>(resolvedEffects$: Observable&#x3C;<a href=\"api/effects/EffectNotification\" class=\"code-anchor\">EffectNotification</a>>) {\n    return this.actions$.pipe(\n      <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>('LOGGED_IN'),\n      exhaustMap(() =>\n        resolvedEffects$.pipe(\n          takeUntil(this.actions$.pipe(<a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>('LOGGED_OUT')))\n        )\n      )\n    );\n  }\n}\n</code-example>\n<h3 id=\"identify-effects-uniquely\">Identify Effects Uniquely<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/lifecycle#identify-effects-uniquely\"><i class=\"material-icons\">link</i></a></h3>\n<p>By default, each Effects class is registered once regardless of how many times the Effect class is loaded.\nBy implementing this interface, you define a unique identifier to register an Effects class instance multiple times.</p>\n<p>Usage:</p>\n<code-example header=\"user.effects.ts\">\nclass EffectWithIdentifier implements <a href=\"api/effects/OnIdentifyEffects\" class=\"code-anchor\">OnIdentifyEffects</a> {\n  constructor(private effectIdentifier: string) {}\n\n  ngrxOnIdentifyEffects() {\n    return this.effectIdentifier;\n  }\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/effects/Actions\n - api/effects/Effect\n - api/effects/EffectNotification\n - api/effects/OnIdentifyEffects\n - api/effects/OnInitEffects\n - api/effects/OnRunEffects\n - api/effects/OnRunEffects#ngrxOnRunEffects\n - api/effects/ROOT_EFFECTS_INIT\n - api/effects/createEffect\n - api/effects/mapToAction\n - api/effects/ofType\n - api/store/Action\n - guide/effects/lifecycle#controlling-effects\n - guide/effects/lifecycle#effect-metadata\n - guide/effects/lifecycle#identify-effects-uniquely\n - guide/effects/lifecycle#lifecycle\n - guide/effects/lifecycle#non-dispatching-effects\n - guide/effects/lifecycle#oniniteffects\n - guide/effects/lifecycle#onruneffects\n - guide/effects/lifecycle#resubscribe-on-error\n - guide/effects/lifecycle#root_effects_init\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/lifecycle.md?message=docs%3A%20describe%20your%20change...\n-->"
}