{
  "id": "guide/effects/api",
  "title": "API",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/api.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"api\">API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#api\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"effectsmodule\">EffectsModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#effectsmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgModule for @ngrx/effects.</p>\n<h3 id=\"forroot\">forRoot<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#forroot\"><i class=\"material-icons\">link</i></a></h3>\n<p>Registers internal @ngrx/effects services to run in your application. This is required once in your root NgModule.</p>\n<p>Usage:</p>\n<code-example language=\"ts\">\n@NgModule({\n  imports: [EffectsModule.forRoot([FirstEffectsClass, SecondEffectsClass])],\n})\nexport class AppModule {}\n</code-example>\n<h3 id=\"root_effects_init\">ROOT_EFFECTS_INIT<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#root_effects_init\"><i class=\"material-icons\">link</i></a></h3>\n<p>After all the root effects have been added, the root effect dispatches a <code><a href=\"api/effects/ROOT_EFFECTS_INIT\" class=\"code-anchor\">ROOT_EFFECTS_INIT</a></code> action.\nYou can see this action as a lifecycle hook, which you can use in order to execute some code after all your root effects have been added.</p>\n<code-example language=\"ts\">\n@<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\ninit$ = this.actions$.pipe(\n  <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>(<a href=\"api/effects/ROOT_EFFECTS_INIT\" class=\"code-anchor\">ROOT_EFFECTS_INIT</a>),\n  map(action => ...)\n);\n</code-example>\n<h3 id=\"forfeature\">forFeature<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#forfeature\"><i class=\"material-icons\">link</i></a></h3>\n<p>Registers @ngrx/effects services to run with your feature modules.</p>\n<p><strong>Note</strong>: Running an effects class multiple times, either by <code>forRoot()</code> or <code>forFeature()</code>, (for example via different lazy loaded modules) will not cause Effects to run multiple times. There is no functional difference between effects loaded by <code>forRoot()</code> and <code>forFeature()</code>; the important difference between the functions is that <code>forRoot()</code> sets up the providers required for effects.</p>\n<p>Usage:</p>\n<code-example language=\"ts\">\n@NgModule({\n  imports: [EffectsModule.forFeature([SomeEffectsClass, AnotherEffectsClass])],\n})\nexport class FeatureModule {}\n</code-example>\n<h3 id=\"update_effects\">UPDATE_EFFECTS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#update_effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>After feature effects are registered, an <code><a href=\"api/effects/UPDATE_EFFECTS\" class=\"code-anchor\">UPDATE_EFFECTS</a></code> action is dispatched.</p>\n<code-example language=\"ts\">\n<a href=\"api/store/Action#type\" class=\"code-anchor\">type</a> <a href=\"api/effects/UpdateEffects\" class=\"code-anchor\">UpdateEffects</a> = {\n  <a href=\"api/store/Action#type\" class=\"code-anchor\">type</a>: typeof <a href=\"api/effects/UPDATE_EFFECTS\" class=\"code-anchor\">UPDATE_EFFECTS</a>;\n  effects: string[];\n};\n</code-example>\n<p>For example, when you register your feature module as <code>EffectsModule.forFeature([SomeEffectsClass, AnotherEffectsClass])</code>,\nit has <code>SomeEffectsClass</code> and <code>AnotherEffectsClass</code> in an array as its payload.</p>\n<p>To dispatch an action when the <code>SomeEffectsClass</code> effect has been registered, listen to the <code><a href=\"api/effects/UPDATE_EFFECTS\" class=\"code-anchor\">UPDATE_EFFECTS</a></code> action and use the <code>effects</code> payload to filter out non-important effects.</p>\n<code-example language=\"ts\">\n@<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\ninit = this.actions.pipe(\n  <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>&#x3C;<a href=\"api/effects/UpdateEffects\" class=\"code-anchor\">UpdateEffects</a>>(<a href=\"api/effects/UPDATE_EFFECTS\" class=\"code-anchor\">UPDATE_EFFECTS</a>)\n  filter(action => action.effects.includes('SomeEffectsClass')),\n  map(action => ...)\n);\n</code-example>\n<h2 id=\"actions\">Actions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#actions\"><i class=\"material-icons\">link</i></a></h2>\n<p>Stream of all actions dispatched in your application including actions dispatched by effect streams.</p>\n<p>Usage:</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a> } from '@ngrx/effects';\n\n@Injectable()\nexport class SomeEffectsClass {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n}\n</code-example>\n<h3 id=\"oftype\">ofType<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#oftype\"><i class=\"material-icons\">link</i></a></h3>\n<p>Filter actions by action types. Specify the action type to allow type-safe mapping to other data on the action, including payload.</p>\n<p>Usage:</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a> } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SomeEffectsClass {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\n  authActions$ = this.actions$.pipe(\n    <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>&#x3C;LoginAction | LogoutAction>('LOGIN', 'LOGOUT'),\n    tap(action => console.log(action))\n  );\n}\n</code-example>\n<h3 id=\"non-dispatching-effects\">Non-dispatching Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#non-dispatching-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>Pass <code>{ dispatch: false }</code> to the decorator to prevent dispatching.</p>\n<p>Sometimes you don't want effects to dispatch an action, for example when you only want to log or navigate. But when an effect does not dispatch another action, the browser will crash because the effect is both 'subscribing' to and 'dispatching' the exact same action, causing an infinite loop. To prevent this, add { dispatch: false } to the decorator.</p>\n<p>Usage:</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a> } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SomeEffectsClass {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>({ dispatch: false })\n  logActions$ = this.actions$.pipe(tap(action => console.log(action)));\n}\n</code-example>\n<h3 id=\"initializing-effect\">Initializing effect<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#initializing-effect\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can execute some code that will be executed directly after the effect class is loaded.</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a> } from '@ngrx/effects';\nimport { defer } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SomeEffectsClass {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>({ dispatch: false })\n  init$: Observable&#x3C;any> = defer(() => of(null)).pipe(\n    tap(() => console.log('init$'))\n  );\n}\n</code-example>\n<p>If you want to trigger another action, be careful to add this effect at the end.</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a> } from '@ngrx/effects';\nimport { defer } from 'rxjs';\nimport { LoginAction, LogoutAction } from './auth.actions';\n\n@Injectable()\nexport class SomeEffectsClass {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>({ dispatch: false })\n  authActions$ = this.actions$.pipe(\n    <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>&#x3C;LoginAction | LogoutAction>('LOGIN', 'LOGOUT'),\n    tap(action => console.log(action))\n  );\n\n  // Should be your last <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\n  init$: Observable&#x3C;action> = defer(() => {\n    return of(new LogoutAction());\n  });\n}\n</code-example>\n<h2 id=\"controlling-effects\">Controlling Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#controlling-effects\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"onruneffects\">OnRunEffects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#onruneffects\"><i class=\"material-icons\">link</i></a></h3>\n<p>By default, effects are merged and subscribed to the store. Implement the <code><a href=\"api/effects/OnRunEffects\" class=\"code-anchor\">OnRunEffects</a></code> interface to control the lifecycle of the resolved effects.</p>\n<p>Usage:</p>\n<code-example language=\"ts\">\nimport { Injectable } from '@angular/core';\nimport {\n  <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>,\n  <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>,\n  <a href=\"api/effects/OnRunEffects\" class=\"code-anchor\">OnRunEffects</a>,\n  <a href=\"api/effects/EffectNotification\" class=\"code-anchor\">EffectNotification</a>,\n  <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>,\n} from '@ngrx/effects';\nimport { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { exhaustMap, takeUntil, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UserEffects implements <a href=\"api/effects/OnRunEffects\" class=\"code-anchor\">OnRunEffects</a> {\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\n  updateUser$: Observable&#x3C;<a href=\"api/store/Action\" class=\"code-anchor\">Action</a>> = this.actions$.pipe(\n    <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>('UPDATE_USER'),\n    tap(action => {\n      console.log(action);\n    })\n  );\n\n  <a href=\"api/effects/OnRunEffects#ngrxOnRunEffects\" class=\"code-anchor\">ngrxOnRunEffects</a>(resolvedEffects$: Observable&#x3C;<a href=\"api/effects/EffectNotification\" class=\"code-anchor\">EffectNotification</a>>) {\n    return this.actions$.pipe(\n      <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>('LOGGED_IN'),\n      exhaustMap(() =>\n        resolvedEffects$.pipe(\n          takeUntil(this.actions$.pipe(<a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>('LOGGED_OUT')))\n        )\n      )\n    );\n  }\n}\n</code-example>\n<h2 id=\"utilities\">Utilities<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#utilities\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"mergeeffects\">mergeEffects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/api#mergeeffects\"><i class=\"material-icons\">link</i></a></h3>\n<p>Manually merges all decorated effects into a combined observable.</p>\n<p>Usage:</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/effects/mergeEffects\" class=\"code-anchor\">mergeEffects</a> } from '@ngrx/effects';\n\nexport class MyService {\n  constructor(effects: SomeEffectsClass) {\n    <a href=\"api/effects/mergeEffects\" class=\"code-anchor\">mergeEffects</a>(effects).subscribe(result => {\n      console.log(result);\n    });\n  }\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/effects/Actions\n - api/effects/Effect\n - api/effects/EffectNotification\n - api/effects/EffectNotification#effect\n - api/effects/OnRunEffects\n - api/effects/OnRunEffects#ngrxOnRunEffects\n - api/effects/ROOT_EFFECTS_INIT\n - api/effects/UPDATE_EFFECTS\n - api/effects/UpdateEffects\n - api/effects/mergeEffects\n - api/effects/ofType\n - api/store/Action\n - api/store/Action#type\n - guide/effects/api#actions\n - guide/effects/api#api\n - guide/effects/api#controlling-effects\n - guide/effects/api#effectsmodule\n - guide/effects/api#forfeature\n - guide/effects/api#forroot\n - guide/effects/api#initializing-effect\n - guide/effects/api#mergeeffects\n - guide/effects/api#non-dispatching-effects\n - guide/effects/api#oftype\n - guide/effects/api#onruneffects\n - guide/effects/api#root_effects_init\n - guide/effects/api#update_effects\n - guide/effects/api#utilities\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/api.md?message=docs%3A%20describe%20your%20change...\n-->"
}