{
  "id": "guide/store",
  "title": "Store",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"store\">Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#store\"><i class=\"material-icons\">link</i></a></h1>\n<p>Store is RxJS powered state management for Angular applications, inspired by Redux. Store is a controlled state container designed to help write performant, consistent applications on top of Angular.</p>\n<h2 id=\"key-concepts\">Key concepts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#key-concepts\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"guide/store/actions\">Actions</a> describe unique events that are dispatched from components and services.</li>\n<li>State changes are handled by pure functions called <a href=\"guide/store/reducers\">reducers</a> that take the current state and the latest action to compute a new state.</li>\n<li><a href=\"guide/store/selectors\">Selectors</a> are pure functions used to select, derive and compose pieces of state.</li>\n<li>State accessed with the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code>, an observable of state and an observer of actions.</li>\n</ul>\n<h2 id=\"installation\">Installation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#installation\"><i class=\"material-icons\">link</i></a></h2>\n<code-example language=\"sh\">\nnpm install @ngrx/store --save\n</code-example>\n<code-example language=\"sh\">\nyarn add @ngrx/store\n</code-example>\n<h2 id=\"alternative-install---adding-to-your-angular-cli-projects\">Alternative Install - Adding to your Angular CLI Project(s)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#alternative-install---adding-to-your-angular-cli-projects\"><i class=\"material-icons\">link</i></a></h2>\n<p>If your project is using the Angular CLI 6+ then you can utilize the following <code>ng add</code> commands <a href=\"https://angular.io/cli/add\" target=\"_blank\">(details here)</a>:</p>\n<h3 id=\"add-ngrx-store\">Add NgRx Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#add-ngrx-store\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"sh\">\nng add @ngrx/store\n</code-example>\n<p>This can be a real time-saver as running the above command will automate the following steps: </p>\n<ol>\n<li>Update <code>package.json</code> > <code>depedencies</code> with <code>@ngrx/store</code>.</li>\n<li>Run an <code>npm install</code> to install those depedencies. </li>\n<li>Create a <code>src/app/reducers</code> folder</li>\n<li>Create a shell <code>src/app/reducers/index.ts</code> with an empty <code><a href=\"api/store/State\" class=\"code-anchor\">State</a></code> interface, an empty <code>reducers</code> map, and empty <code>metaReducers</code> array</li>\n<li>Update your <code>src/app/app.module.ts</code> > <code>imports</code> array with <code>StoreModule.forRoot(reducers, { metaReducers })</code></li>\n</ol>\n<h3 id=\"add-ngrx-store-devtools\">Add NgRx Store DevTools<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#add-ngrx-store-devtools\"><i class=\"material-icons\">link</i></a></h3>\n<p>To add the NgRx Store DevTools to your project run the following:</p>\n<code-example language=\"sh\">\nng add @ngrx/store-devtools\n</code-example>\n<p>This command will automate the following steps:</p>\n<ol>\n<li>Update <code>package.json</code> > <code>depedencies</code> with <code>@ngrx/store-devtools</code>.</li>\n<li>Run an <code>npm install</code> to install those depedencies. </li>\n<li>Update your <code>src/app.module.ts</code> > <code>imports</code> array with <code>StoreDevtoolsModule.instrument({ <a href=\"api/store-devtools/StoreDevtoolsConfig#maxAge\" class=\"code-anchor\">maxAge</a>: 25, <a href=\"api/store-devtools/StoreDevtoolsConfig#logOnly\" class=\"code-anchor\">logOnly</a>: environment.production })</code></li>\n</ol>\n<h2 id=\"tutorial\">Tutorial<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#tutorial\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following tutorial shows you how to manage the state of a counter, and how to select and display it within an Angular component. Try the <live-example name=\"store\" nodownload=\"\"></live-example>.</p>\n<ol>\n<li>\n<p>Generate a <a href=\"https://stackblitz.com/fork/ngrx-start\" target=\"_blank\">new project</a> using StackBlitz.</p>\n</li>\n<li>\n<p>Right click on the <code>app</code> folder in StackBlitz and create a new file named <code>counter.actions.ts</code> to describe the counter actions to increment, decrement, and reset its value.</p>\n</li>\n</ol>\n<code-example header=\"src/app/counter.actions.ts\" path=\"store/src/app/counter.actions.ts\">\nimport { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\n\nexport enum ActionTypes {\n  Increment = '[Counter Component] Increment',\n  Decrement = '[Counter Component] Decrement',\n  Reset = '[Counter Component] Reset',\n}\n\nexport class Increment implements <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly <a href=\"api/store/Action#type\" class=\"code-anchor\">type</a> = ActionTypes.Increment;\n}\n\nexport class Decrement implements <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly <a href=\"api/store/Action#type\" class=\"code-anchor\">type</a> = ActionTypes.Decrement;\n}\n\nexport class Reset implements <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly <a href=\"api/store/Action#type\" class=\"code-anchor\">type</a> = ActionTypes.Reset;\n}\n\n\n</code-example>\n<ol start=\"3\">\n<li>Define a reducer function to handle changes in the counter value based on the provided actions.</li>\n</ol>\n<code-example header=\"src/app/counter.reducer.ts\" path=\"store/src/app/counter.reducer.ts\">\nimport { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\nimport { ActionTypes } from './counter.actions';\n\nexport const <a href=\"api/store/testing/MockStoreConfig#initialState\" class=\"code-anchor\">initialState</a> = 0;\n\nexport function counterReducer(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> = <a href=\"api/store/testing/MockStoreConfig#initialState\" class=\"code-anchor\">initialState</a>, action: <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>) {\n  switch (action.type) {\n    case ActionTypes.Increment:\n      return <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> + 1;\n\n    case ActionTypes.Decrement:\n      return <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> - 1;\n\n    case ActionTypes.Reset:\n      return 0;\n\n    default:\n      return <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>;\n  }\n}\n\n\n</code-example>\n<ol start=\"4\">\n<li>Import the <code><a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a></code> from <code>@ngrx/store</code> and the <code>counter.reducer</code> file.</li>\n</ol>\n<code-example header=\"src/app/app.module.ts (imports)\" path=\"store/src/app/app.module.ts\" region=\"imports\">\nimport { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\nimport { counterReducer } from './counter.reducer';\n\n</code-example>\n<ol start=\"5\">\n<li>Add the <code>StoreModule.forRoot</code> function in the <code>imports</code> array of your <code>AppModule</code> with an object containing the <code>count</code> and the <code>counterReducer</code> that manages the state of the counter. The <code><a href=\"\" class=\"code-anchor\">StoreModule.forRoot()</a></code> method registers the global providers needed to access the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> throughout your application.</li>\n</ol>\n<code-example header=\"src/app/app.module.ts (StoreModule)\" path=\"store/src/app/app.module.1.ts\">\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\nimport { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\nimport { counterReducer } from './counter.reducer';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ count: counterReducer })\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\n\n</code-example>\n<ol start=\"6\">\n<li>Create a new <em>Component</em> named <code>my-counter</code> in the <code>app</code> folder. Inject the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> service into your component to dispatch the counter actions, and use the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> operator to <em>select</em> data from the state.</li>\n</ol>\n<p>Update the <code>MyCounterComponent</code> template with buttons to call the increment, decrement, and reset methods. Use the async pipe to subscribe to the <em>count$</em> observable.</p>\n<code-example header=\"src/app/my-counter/my-counter.component.html\" path=\"store/src/app/my-counter/my-counter.component.html\">\n&#x3C;button (click)=\"increment()\">Increment&#x3C;/button>\n \n&#x3C;div>Current Count: {{ count$ | async }}&#x3C;/div>\n\n&#x3C;button (click)=\"decrement()\">Decrement&#x3C;/button>\n\n&#x3C;button (click)=\"reset()\">Reset Counter&#x3C;/button>\n\n</code-example>\n<p>Update the <code>MyCounterComponent</code> class with a selector for the <em>count</em>, and methods to dispatch the Increment, Decrement, and Reset actions.</p>\n<code-example header=\"src/app/my-counter/my-counter.component.ts\" path=\"store/src/app/my-counter/my-counter.component.ts\">\nimport { Component } from '@angular/core';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/select\" class=\"code-anchor\">select</a> } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Increment, Decrement, Reset } from '../counter.actions';\n\n@Component({\n  selector: 'app-my-counter',\n  templateUrl: './my-counter.component.html',\n  styleUrls: ['./my-counter.component.css'],\n})\nexport class MyCounterComponent {\n  count$: Observable&#x3C;number>;\n\n  constructor(private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;{ count: number }>) {\n    this.count$ = store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>('count'));\n  }\n\n  increment() {\n    this.store.dispatch(new Increment());\n  }\n\n  decrement() {\n    this.store.dispatch(new Decrement());\n  }\n\n  reset() {\n    this.store.dispatch(new Reset());\n  }\n}\n\n\n</code-example>\n<ol start=\"7\">\n<li>Add the <code>MyCounter</code> component to your <code>AppComponent</code> template.</li>\n</ol>\n<code-example header=\"src/app/app.component.html\" path=\"store/src/app/app.component.html\" region=\"counter\">\n&#x3C;app-my-counter>&#x3C;/app-my-counter>\n\n</code-example>\n<p>And that's it! Click the increment, decrement, and reset buttons to change the state of the counter.</p>\n<p>Let's cover what you did:</p>\n<ul>\n<li>Defined actions to express events.</li>\n<li>Defined a reducer function to manage the state of the counter.</li>\n<li>Registered the global state container that is available throughout your application.</li>\n<li>Injected the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> service to dispatch actions and select the current state of the counter.</li>\n</ul>\n<h2 id=\"next-steps\">Next Steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p>Learn about the architecture of an NgRx application through <a href=\"guide/store/actions\">actions</a>, <a href=\"guide/store/reducers\">reducers</a>, and <a href=\"guide/store/selectors\">selectors</a>.</p>\n\n</div>\n\n<!-- links to this doc:\n - docs\n - guide/effects\n - guide/router-store\n - guide/store-devtools\n - index\n-->\n<!-- links from this doc:\n - api/store-devtools/StoreDevtools#state\n - api/store-devtools/StoreDevtoolsConfig#logOnly\n - api/store-devtools/StoreDevtoolsConfig#maxAge\n - api/store/Action\n - api/store/Action#type\n - api/store/State\n - api/store/Store\n - api/store/StoreModule\n - api/store/select\n - api/store/testing/MockStoreConfig#initialState\n - guide/store#add-ngrx-store\n - guide/store#add-ngrx-store-devtools\n - guide/store#alternative-install---adding-to-your-angular-cli-projects\n - guide/store#installation\n - guide/store#key-concepts\n - guide/store#next-steps\n - guide/store#store\n - guide/store#tutorial\n - guide/store/actions\n - guide/store/reducers\n - guide/store/selectors\n - https://angular.io/cli/add\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/index.md?message=docs%3A%20describe%20your%20change...\n - https://stackblitz.com/fork/ngrx-start\n-->"
}