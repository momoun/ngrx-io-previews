{
  "id": "guide/component/rxjs/operators/coalesce",
  "title": "coalesce",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component/rxjs/operators/coalesce.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"coalesce\">coalesce<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/rxjs/operators/coalesce#coalesce\"><i class=\"material-icons\">link</i></a></h1>\n<p>Limits the number of synchronous emitted a value from the source Observable to\none emitted value per <a href=\"https://developer.mozilla.org/en-US/search?q=AnimationFrame\"><code>AnimationFrame</code></a>,\nthen repeats this process for every tick of the browsers event loop.</p>\n<p>The coalesce operator is based on the <a href=\"https://rxjs-dev.firebaseapp.com/api/operators/throttle\">throttle</a> operator.\nIn addition to that is provides emitted values for the trailing end only, as well as maintaining a context to scope coalescing.</p>\n<figure>\n  <img src=\"generated/images/guide/component/coalesce.png\" alt=\"coalesce Operator Marble Diagram\" width=\"100%\" height=\"100%\">\n</figure>\n<figure>\n  <img src=\"generated/images/guide/component/coalesce_2.png\" alt=\"coalesce Operator Marble Diagram (v2)\" width=\"100%\" height=\"100%\">\n</figure>\n<h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/rxjs/operators/coalesce#description\"><i class=\"material-icons\">link</i></a></h2>\n<p> Rendering, in most web applications, is by far the most performance crucial part.\nThe <code>coalesce</code> operator's general purpose is to buffer synchronous emissions together\nto a single emission per <code>AnimationFrame</code>,\nenabling the user to fire potential view renderings only once even if multiple values are changed across the passed context.\nrender changes only once per <code>animationFrame</code>.\nBy default, changes will be emitted on the trailing edge of an <code>AnimationFrame</code>.\nThis behavior is fully configurable by the <code>durationSelector</code>.</p>\n<p> Additionally, the <code>coalesce</code> operator provides the option to define a custom coalescing scope via the passed <code><a href=\"api/data/DefaultDataServiceFactory#config\" class=\"code-anchor\">config</a></code> object.\nIf provided, the buffered changes of the source will only be emitted once per scope.\nThis is especially helpful in scenarios where you want to have only one emission across multiple usages of the operator.</p>\n<p> You find a more in depth explanation in the <a href=\"guide/component/rxjs/operators/coalesce#usage-of-context-scoping\">usage of context scoping</a> section of this document.</p>\n<h2 id=\"basic-usage\">Basic usage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/rxjs/operators/coalesce#basic-usage\"><i class=\"material-icons\">link</i></a></h2>\n<p>  By default the coalesce operator helps you to buffer incoming values within an animationFrame and emits once per browser event-loop tick.\nThis example demonstrates how the render method is only called once thus having four changes of the source stream.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { coalesce } from '@ngrx/component';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { range } from '@rxjs';\n \nconst source$ = range(1, 4); // stream of data\nsource$.pipe(\n    coalesce()\n).subscribe(stateChanges => {\n    render(); // render <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> will be called once for the <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> 4 of the stream\n});\n</code-example>\n<h2 id=\"parameters\">Parameters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/rxjs/operators/coalesce#parameters\"><i class=\"material-icons\">link</i></a></h2>\n<p>  <strong>durationSelector:</strong></p>\n<p>  Optional. Default is <code>defaultCoalesceDurationSelector</code> (coalescing by animationFrame)\nA function that receives a value from the source Observable, for computing the silencing duration for each source value, returned as an Observable or a Promise.</p>\n<p>   <strong>config:</strong></p>\n<p>   Optional. Default is <code>defaultCoalesceConfig</code> ({ leading: false, trailing: true }` &#x26; scoping per Subscriber aka no scoping).</p>\n<h3 id=\"usage-of-leadingtraining\">Usage of Leading/Training<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/rxjs/operators/coalesce#usage-of-leadingtraining\"><i class=\"material-icons\">link</i></a></h3>\n<p>The flags <code>leading</code> and <code>trailing</code> help to determine which values should be forwarded.</p>\n<p>Imagine you have a observable that emits a number of values synchronously. e.g. <code>range(1,10)</code>.</p>\n<p>Setting <code>leading</code> to true would result in the emissions <code>1</code>.\nSetting <code>trailing</code> to true would result in the emissions <code>10</code>.\nSetting <code>leading</code> and <code>trailing</code> to true would result in the emissions <code>1, 10</code>.</p>\n<code-example language=\"typescript\">\n <a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { coalesce } from '@ngrx/component';\n <a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { range } from '@rxjs';\n  \n const source$ = range(1, 4); // synchronous emitted values\n source$.pipe(\n     coalesce({leading: true, tailing: true})\n ).subscribe(v => console.log(v)); // 1, 10\n</code-example>\n<h3 id=\"usage-of-context-scoping\">Usage of Context Scoping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/rxjs/operators/coalesce#usage-of-context-scoping\"><i class=\"material-icons\">link</i></a></h3>\n<p> If multiple coalesce operators are configured with the same scope object, only one change will be emitted to the first <code>Subscriber</code>.\nThis simple example shows how it is possible to coalesce multiple subscribers to one shared scope object. This will result in\nonly one rendering call thus having multiple subscribers to the incoming stream.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { coalesce } from '@ngrx/component';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { range, animationFrames } from '@rxjs';\n \nconst source$ = range(1, 10); // synchronous emitted values\nconst coalesceConfig = {\n   context: {} // e.g. this.componentRef;\n};\n\nsource$.pipe(\n    coalesce(() => animationFrames(), coalesceConfig)\n).subscribe(stateChanges => {\n    render(stateChanges); // render <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> will be called once for the <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> 4 of the stream\n});\n\nsource$.pipe(\n    coalesce(() => generateFrames(), coalesceConfig)\n).subscribe(stateChanges => {\n   render(stateChanges);\n});\n// view doesn't get rendered, since the <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> will be emitted only once per scope\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/component\n-->\n<!-- links from this doc:\n - api/data/DefaultDataServiceFactory#config\n - api/data/RequestData#method\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/testing/MockSelector#value\n - guide/component/rxjs/operators/coalesce#basic-usage\n - guide/component/rxjs/operators/coalesce#coalesce\n - guide/component/rxjs/operators/coalesce#description\n - guide/component/rxjs/operators/coalesce#parameters\n - guide/component/rxjs/operators/coalesce#usage-of-context-scoping\n - guide/component/rxjs/operators/coalesce#usage-of-leadingtraining\n - https://developer.mozilla.org/en-US/search?q=AnimationFrame\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component/rxjs/operators/coalesce.md?message=docs%3A%20describe%20your%20change...\n - https://rxjs-dev.firebaseapp.com/api/operators/throttle\n-->"
}