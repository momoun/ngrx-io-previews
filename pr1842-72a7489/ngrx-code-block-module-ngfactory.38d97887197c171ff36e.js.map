{"version":3,"sources":["webpack:///./src/app/custom-elements/ngrx/code-block.component.ts","webpack:///./src/app/custom-elements/ngrx/code-block.module.ts","webpack:///./src/app/custom-elements/ngrx/code-block.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/ngrx/code-block.component.ts.CodeBlockComponent.html","webpack:///./src/app/custom-elements/ngrx/code-block.module.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/pretty-printer.service.ts"],"names":["EFFECTS_EXAMPLE","SCHEMATICS_EXAMPLE","CodeBlockComponent","[object Object]","pretty","this","code","formattedCode","formatCode","subscribe","codeContainer","nativeElement","innerHTML","code_block_module_CodeBlockModule","customElementComponent","RenderType_CodeBlockComponent","core","encapsulation","styles","data","View_CodeBlockComponent_0","_l","View_CodeBlockComponent_Host_0","pretty_printer_service","CodeBlockComponentNgFactory","__webpack_require__","d","__webpack_exports__","CodeBlockModuleNgFactory","common","logger_service","PrettyPrinter","rxjs__WEBPACK_IMPORTED_MODULE_0__","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","logger","prettyPrintOne","Object","getPrettyPrintOne","pipe","ppo","window","Promise","resolve","e","then","t","bind","err","msg","message","error","Error","language","linenums","substr","console"],"mappings":"qHASA,MAAMA,EAAkB,wLAUlBC,EAAqB,yHAYpB,MAAMC,EAQXC,YAAoBC,GAAAC,KAAAD,SAPXC,KAAAC,KAAO,GAKhBD,KAAAE,cAAgB,GAIhBJ,qBAGEE,KAAKD,OAAOI,WAFa,YAAdH,KAAKC,KAAqBN,EAAkBC,GAE1BQ,UAAUF,IACrCF,KAAKK,cAAcC,cAAcC,UAAYL,KChC5C,MAAMM,EAPbV,cAQEE,KAAAS,uBAAoCZ,mBCJlCa,EAAgCC,EAAA,GAAQ,CAAEC,cAAe,EAAGC,OADhC,GACmEC,KAAM,KAElG,SAASC,EAA0BC,GAAM,OAAOL,EAAA,GAAQ,EAAG,CAACA,EAAA,GAAQ,UAAW,EAAG,CAAEN,cAAe,KCXtGW,MAAAL,EAAA,sGAAwC,WDYrC,SAASM,EAA+BD,GAAM,OAAOL,EAAA,GAAQ,EAAG,EAAEK,MAAQL,EAAA,GAAQ,EAAG,EAAG,KAAM,KAAM,EAAG,kBAAmB,GAAI,KAAM,KAAM,KAAMI,EAA2BL,IAAiCC,EAAA,GAAQ,EAAG,QAAS,KAAM,EAAGd,EAAuB,CAACqB,EAAA,GAAmB,KAAM,OAAQ,KAAM,MAC/S,IAAIC,EAA8BR,EAAA,GAAQ,kBAAmBd,EAAuBoB,EAAgC,CAAEhB,KAAM,QAAU,GAAI,4BEd1ImB,EAAAC,EAAAC,EAAA,6CAAAC,IAYA,IAAIA,EAA2BZ,EAAA,GAAQH,EAAoB,GAAI,SAAUQ,GAAM,OAAOL,EAAA,GAAQ,CAACA,EAAA,GAAQ,IAAKA,EAAA,EAA6BA,EAAA,GAAqC,CAAC,CAAC,EAAG,CAACQ,IAAkC,CAAC,EAAGR,EAAA,GAA8BA,EAAA,IAAkBA,EAAA,GAAQ,KAAMa,EAAA,EAAmBA,EAAA,EAAyB,CAACb,EAAA,EAAc,CAAC,EAAGa,EAAA,KAAyCb,EAAA,GAAQ,KAAMO,EAAA,EAAkBA,EAAA,EAAkB,CAACO,EAAA,IAAad,EAAA,GAAQ,WAAYa,EAAA,EAAiBA,EAAA,EAAiB,IAAKb,EAAA,GAAQ,WAAYH,EAAoBA,EAAoB,2CCVvjBY,EAAAC,EAAAC,EAAA,sBAAAI,IAAA,IAAAC,EAAAP,EAAA,QAAAQ,EAAAR,EAAA,QAAAS,EAAAT,EAAA,QAAAU,EAAAV,EAAA,QAYO,MAAMM,EAIX5B,YAAoBiC,GAAA/B,KAAA+B,SAClB/B,KAAKgC,eAAiBC,OAAAN,EAAA,EAAAM,CAAYjC,KAAKkC,qBAAqBC,KAAKF,OAAAL,EAAA,EAAAK,IAG3DnC,oBACN,MAAMsC,EAAOC,OAA+B,eAC5C,OAAOD,EAAME,QAAQC,QAAQH,GAE3BhB,EAAAoB,EAAA,IAAAC,KAAArB,EAAAsB,EAAAC,KAAA,gBACGF,KACC,IAAOJ,OAA+B,eACtCO,IACE,MAAMC,yCAA6CD,EAAIE,UAGvD,OAFA9C,KAAK+B,OAAOgB,MAAM,IAAIC,MAAMH,IAErB,KAAQ,MAAM,IAAIG,MAAMH,MAczC/C,WAAWG,EAAcgD,EAAmBC,GAC1C,OAAOlD,KAAKgC,eAAeG,KACzBF,OAAAJ,EAAA,EAAAI,CAAIG,IACF,IACE,OAAOA,EAAInC,EAAMgD,EAAUC,GAC3B,MAAON,GACP,MAAMC,wCAA4C5C,EAAKkD,OAAO,EAAG,WAEjE,MADAC,QAAQL,MAAMF,EAAKD,GACb,IAAII,MAAMH,MAGpBZ,OAAAH,EAAA,EAAAG","file":"ngrx-code-block-module-ngfactory.38d97887197c171ff36e.js","sourcesContent":["import {\n  Component,\n  Input,\n  AfterContentInit,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\nimport { PrettyPrinter } from '../code/pretty-printer.service';\n\nconst EFFECTS_EXAMPLE = `\nsearch$ = createEffect(() => \n  this.actions$.pipe(\n    ofType(BookActions.search),\n    exhaustMap(action =>\n      this.googleBooksService.search(action.query)\n    )\n  )\n);`;\n\nconst SCHEMATICS_EXAMPLE = `\n$ ng g store State --root --module app.module.ts\n create src/app/reducers/index.ts\n update src/app/app.module.ts\n`;\n\n@Component({\n  selector: 'ngrx-code-block',\n  template: `\n    <pre class=\"prettyprint\" #codeContainer></pre>\n  `,\n})\nexport class CodeBlockComponent implements AfterContentInit {\n  @Input() code = '';\n\n  @ViewChild('codeContainer', { read: ElementRef })\n  codeContainer;\n\n  formattedCode = '';\n\n  constructor(private pretty: PrettyPrinter) {}\n\n  ngAfterContentInit() {\n    let code = this.code === 'effects' ? EFFECTS_EXAMPLE : SCHEMATICS_EXAMPLE;\n\n    this.pretty.formatCode(code).subscribe(formattedCode => {\n      this.codeContainer.nativeElement.innerHTML = formattedCode;\n    });\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeBlockComponent } from './code-block.component';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { PrettyPrinter } from '../code/pretty-printer.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [CodeBlockComponent],\n  exports: [CodeBlockComponent],\n  entryComponents: [CodeBlockComponent],\n  providers: [PrettyPrinter],\n})\nexport class CodeBlockModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = CodeBlockComponent;\n}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./code-block.component\";\nimport * as i2 from \"../code/pretty-printer.service\";\nvar styles_CodeBlockComponent = [];\nvar RenderType_CodeBlockComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_CodeBlockComponent, data: {} });\nexport { RenderType_CodeBlockComponent as RenderType_CodeBlockComponent };\nexport function View_CodeBlockComponent_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { codeContainer: 0 }), (_l()(), i0.ɵeld(1, 0, [[1, 0], [\"codeContainer\", 1]], null, 0, \"pre\", [[\"class\", \"prettyprint\"]], null, null, null, null, null))], null, null); }\nexport function View_CodeBlockComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"ngrx-code-block\", [], null, null, null, View_CodeBlockComponent_0, RenderType_CodeBlockComponent)), i0.ɵdid(1, 1097728, null, 0, i1.CodeBlockComponent, [i2.PrettyPrinter], null, null)], null, null); }\nvar CodeBlockComponentNgFactory = i0.ɵccf(\"ngrx-code-block\", i1.CodeBlockComponent, View_CodeBlockComponent_Host_0, { code: \"code\" }, {}, []);\nexport { CodeBlockComponentNgFactory as CodeBlockComponentNgFactory };\n","\n    <pre class=\"prettyprint\" #codeContainer></pre>\n  ","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./code-block.module\";\nimport * as i2 from \"./code-block.component.ngfactory\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../code/pretty-printer.service\";\nimport * as i5 from \"../../shared/logger.service\";\nvar CodeBlockModuleNgFactory = i0.ɵcmf(i1.CodeBlockModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.CodeBlockComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i4.PrettyPrinter, i4.PrettyPrinter, [i5.Logger]), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i1.CodeBlockModule, i1.CodeBlockModule, [])]); });\nexport { CodeBlockModuleNgFactory as CodeBlockModuleNgFactory };\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // prettify.js is not in window global; load it with webpack loader\n      import('assets/js/prettify.js')\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n"],"sourceRoot":""}