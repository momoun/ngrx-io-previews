{
  "id": "guide/router-store/configuration",
  "title": "Configuration Options",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/router-store/configuration.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"configuration-options\">Configuration Options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-store/configuration#configuration-options\"><i class=\"material-icons\">link</i></a></h1>\n<code-example header=\"RouterStore Config\">\ninterface <a href=\"api/router-store/StoreRouterConfig\" class=\"code-anchor\">StoreRouterConfig</a> {\n  <a href=\"api/router-store/StoreRouterConfig#stateKey\" class=\"code-anchor\">stateKey</a>?: string | <a href=\"api/store/Selector\" class=\"code-anchor\">Selector</a>&#x3C;any, <a href=\"api/router-store/RouterReducerState\" class=\"code-anchor\">RouterReducerState</a>&#x3C;T>>;\n  <a href=\"api/router-store/StoreRouterConfig#serializer\" class=\"code-anchor\">serializer</a>?: new (...args: any[]) => <a href=\"api/router-store/RouterStateSerializer\" class=\"code-anchor\">RouterStateSerializer</a>;\n  <a href=\"api/router-store/StoreRouterConfig#navigationActionTiming\" class=\"code-anchor\">navigationActionTiming</a>?: <a href=\"api/router-store/NavigationActionTiming\" class=\"code-anchor\">NavigationActionTiming</a>;\n  <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>?: <a href=\"api/router-store/RouterState\" class=\"code-anchor\">RouterState</a>;\n}\n</code-example>\n<ul>\n<li><code><a href=\"api/router-store/StoreRouterConfig#stateKey\" class=\"code-anchor\">stateKey</a></code>: The name of reducer key, defaults to <code>router</code>. It's also possible to provide a selector function.</li>\n<li><code><a href=\"api/router-store/StoreRouterConfig#serializer\" class=\"code-anchor\">serializer</a></code>: How a router snapshot is serialized. Defaults to <code><a href=\"api/router-store/DefaultRouterStateSerializer\" class=\"code-anchor\">DefaultRouterStateSerializer</a></code>. See <a href=\"guide/router-store/configuration#custom-router-state-serializer\">Custom Router State Serializer</a> for more information.</li>\n<li><code><a href=\"api/router-store/StoreRouterConfig#navigationActionTiming\" class=\"code-anchor\">navigationActionTiming</a></code>: When the <code><a href=\"api/router-store/ROUTER_NAVIGATION\" class=\"code-anchor\">ROUTER_NAVIGATION</a></code> is dispatched. Defaults to <code><a href=\"api/router-store/NavigationActionTiming#PreActivation\" class=\"code-anchor\">NavigationActionTiming.PreActivation</a></code>. See <a href=\"guide/router-store/configuration#navigation-action-timing\">Navigation Action Timing</a> for more information.</li>\n<li><code><a href=\"api/router-store/StoreRouterConfig#routerState\" class=\"code-anchor\">routerState</a></code>: Set this property to decide which serializer should be used, if none is provided, and the metadata on the dispatched action.</li>\n</ul>\n<h2 id=\"custom-router-state-serializer\">Custom Router State Serializer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-store/configuration#custom-router-state-serializer\"><i class=\"material-icons\">link</i></a></h2>\n<p>During each navigation cycle, a <code><a href=\"api/router-store/RouterNavigationAction\" class=\"code-anchor\">RouterNavigationAction</a></code> is dispatched with a snapshot of the state in its payload, the <code>RouterStateSnapshot</code>. The <code>RouterStateSnapshot</code> is a large complex structure, containing many pieces of information about the current state and what's rendered by the router. This can cause performance\nissues when used with the Store Devtools. In most cases, you may only need a piece of information from the <code>RouterStateSnapshot</code>. In order to pare down the <code>RouterStateSnapshot</code> provided during navigation, you provide a custom serializer for the snapshot to only return what you need to be added to the payload and store.</p>\n<p>Your custom serializer should implement the abstract class <code><a href=\"api/router-store/RouterStateSerializer\" class=\"code-anchor\">RouterStateSerializer</a></code> and return a snapshot which should have an interface extending <code><a href=\"api/router-store/BaseRouterStoreState\" class=\"code-anchor\">BaseRouterStoreState</a></code>.</p>\n<p>You then provide the serializer through the config.</p>\n<p><strong>In a custom serializer ts file</strong></p>\n<code-example header=\"custom-route-serializer.ts\">\nimport { Params, RouterStateSnapshot } from '@angular/router';\nimport { <a href=\"api/router-store/RouterStateSerializer\" class=\"code-anchor\">RouterStateSerializer</a> } from '@ngrx/router-store';\n\nexport interface RouterStateUrl {\n  url: string;\n  <a href=\"api/router-store/MinimalRouteSnapshot#params\" class=\"code-anchor\">params</a>: Params;\n  <a href=\"api/router-store/MinimalRouteSnapshot#queryParams\" class=\"code-anchor\">queryParams</a>: Params;\n}\n\nexport class CustomSerializer implements <a href=\"api/router-store/RouterStateSerializer\" class=\"code-anchor\">RouterStateSerializer</a>&#x3C;RouterStateUrl> {\n  <a href=\"api/store-devtools/StoreDevtoolsConfig#serialize\" class=\"code-anchor\">serialize</a>(<a href=\"api/router-store/StoreRouterConfig#routerState\" class=\"code-anchor\">routerState</a>: RouterStateSnapshot): RouterStateUrl {\n    let route = routerState.root;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    const {\n      url,\n      root: { <a href=\"api/router-store/MinimalRouteSnapshot#queryParams\" class=\"code-anchor\">queryParams</a> },\n    } = <a href=\"api/router-store/StoreRouterConfig#routerState\" class=\"code-anchor\">routerState</a>;\n    const { <a href=\"api/router-store/MinimalRouteSnapshot#params\" class=\"code-anchor\">params</a> } = route;\n\n    // Only return an object including the URL, <a href=\"api/router-store/MinimalRouteSnapshot#params\" class=\"code-anchor\">params</a> and query <a href=\"api/router-store/MinimalRouteSnapshot#params\" class=\"code-anchor\">params</a>\n    // instead of the entire snapshot\n    return { url, <a href=\"api/router-store/MinimalRouteSnapshot#params\" class=\"code-anchor\">params</a>, <a href=\"api/router-store/MinimalRouteSnapshot#queryParams\" class=\"code-anchor\">queryParams</a> };\n  }\n}\n</code-example>\n<p><strong>In your root reducer</strong></p>\n<code-example header=\"index.ts\">\nexport const reducers: <a href=\"api/store/ActionReducerMap\" class=\"code-anchor\">ActionReducerMap</a>&#x3C;<a href=\"api/store/State\" class=\"code-anchor\">State</a>> = {\n  router: <a href=\"api/router-store/routerReducer\" class=\"code-anchor\">routerReducer</a>\n};\n</code-example>\n<p><strong>In your AppModule</strong></p>\n<code-example header=\"app.module.ts\">\n@NgModule({\n  imports: [\n    StoreModule.forRoot(reducers),\n    RouterModule.forRoot([\n      // routes\n    ]),\n    StoreRouterConnectingModule.forRoot({\n      <a href=\"api/router-store/StoreRouterConfig#serializer\" class=\"code-anchor\">serializer</a>: CustomSerializer\n    })\n  ]\n})\nexport class AppModule {}\n</code-example>\n<h2 id=\"navigation-action-timing\">Navigation action timing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-store/configuration#navigation-action-timing\"><i class=\"material-icons\">link</i></a></h2>\n<p><code><a href=\"api/router-store/ROUTER_NAVIGATION\" class=\"code-anchor\">ROUTER_NAVIGATION</a></code> is by default dispatched before any guards or resolvers run. This may not always be ideal, for example if you rely on the action to be dispatched after guards and resolvers successfully ran and the new route will be activated. You can change the dispatch timing by providing the corresponding config:</p>\n<code-example header=\"app.module.ts\">\nStoreRouterConnectingModule.forRoot({\n  <a href=\"api/router-store/StoreRouterConfig#navigationActionTiming\" class=\"code-anchor\">navigationActionTiming</a>: <a href=\"api/router-store/NavigationActionTiming#PostActivation\" class=\"code-anchor\">NavigationActionTiming.PostActivation</a>,\n});\n</code-example>\n<h2 id=\"routerstate\">routerState<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-store/configuration#routerstate\"><i class=\"material-icons\">link</i></a></h2>\n<p>This property decides which router serializer should be used. If there is a custom serializer provided, it will use the provided serializer. <code><a href=\"api/router-store/StoreRouterConfig#routerState\" class=\"code-anchor\">routerState</a></code> also sets the metadata on dispatched <code>@ngrx/router-store</code> action.</p>\n<h3 id=\"routerstatefull\">RouterState.Full<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-store/configuration#routerstatefull\"><i class=\"material-icons\">link</i></a></h3>\n<p>When this property is set to <code><a href=\"api/router-store/RouterState#Full\" class=\"code-anchor\">RouterState.Full</a></code>, <code>@ngrx/router-store</code> will use the <code><a href=\"api/router-store/DefaultRouterStateSerializer\" class=\"code-anchor\">DefaultRouterStateSerializer</a></code> serializer to serialize the Angular router event.</p>\n<p>The metadata on the action will contain the Angular router event, e.g. NavigationStart<code>and</code>RoutesRecognized`.</p>\n<code-example header=\"app.module.ts\">\nStoreRouterConnectingModule.forRoot({\n  <a href=\"api/router-store/StoreRouterConfig#routerState\" class=\"code-anchor\">routerState</a>: <a href=\"api/router-store/RouterState#Full\" class=\"code-anchor\">RouterState.Full</a>,\n});\n</code-example>\n<h3 id=\"routerstateminimal\">RouterState.Minimal<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-store/configuration#routerstateminimal\"><i class=\"material-icons\">link</i></a></h3>\n<p><code><a href=\"api/router-store/RouterState#Minimal\" class=\"code-anchor\">RouterState.Minimal</a></code> will use the <code><a href=\"api/router-store/MinimalRouterStateSerializer\" class=\"code-anchor\">MinimalRouterStateSerializer</a></code> serializer to serialize Angular router event.</p>\n<p>The metadata on the action consists of the navigation id and the url.</p>\n<code-example language=\"ts\">\n{\n  type: '@ngrx/router-store/navigated',\n  payload: {\n    <a href=\"api/router-store/StoreRouterConfig#routerState\" class=\"code-anchor\">routerState</a>: {\n      root: {\n        <a href=\"api/router-store/MinimalRouteSnapshot#params\" class=\"code-anchor\">params</a>: {},\n        url: [],\n        data: {},\n        <a href=\"api/router-store/MinimalRouteSnapshot#queryParams\" class=\"code-anchor\">queryParams</a>: {}\n      },\n      url: '/login'\n    },\n    event: {\n      <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 2,\n      url: '/login'\n    }\n  }\n}\n</code-example>\n<code-example header=\"app.module.ts\">\nStoreRouterConnectingModule.forRoot({\n  <a href=\"api/router-store/StoreRouterConfig#routerState\" class=\"code-anchor\">routerState</a>: <a href=\"api/router-store/RouterState#Minimal\" class=\"code-anchor\">RouterState.Minimal</a>,\n});\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/UpdateResponseData#id\n - api/router-store/BaseRouterStoreState\n - api/router-store/DefaultRouterStateSerializer\n - api/router-store/MinimalRouteSnapshot#params\n - api/router-store/MinimalRouteSnapshot#queryParams\n - api/router-store/MinimalRouterStateSerializer\n - api/router-store/NavigationActionTiming\n - api/router-store/NavigationActionTiming#PostActivation\n - api/router-store/NavigationActionTiming#PreActivation\n - api/router-store/ROUTER_NAVIGATION\n - api/router-store/RouterNavigationAction\n - api/router-store/RouterReducerState\n - api/router-store/RouterState\n - api/router-store/RouterState#Full\n - api/router-store/RouterState#Minimal\n - api/router-store/RouterStateSerializer\n - api/router-store/StoreRouterConfig\n - api/router-store/StoreRouterConfig#navigationActionTiming\n - api/router-store/StoreRouterConfig#routerState\n - api/router-store/StoreRouterConfig#serializer\n - api/router-store/StoreRouterConfig#stateKey\n - api/router-store/routerReducer\n - api/store-devtools/StoreDevtools#state\n - api/store-devtools/StoreDevtoolsConfig#serialize\n - api/store/ActionReducerMap\n - api/store/Selector\n - api/store/State\n - guide/router-store/configuration#configuration-options\n - guide/router-store/configuration#custom-router-state-serializer\n - guide/router-store/configuration#navigation-action-timing\n - guide/router-store/configuration#routerstate\n - guide/router-store/configuration#routerstatefull\n - guide/router-store/configuration#routerstateminimal\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/router-store/configuration.md?message=docs%3A%20describe%20your%20change...\n-->"
}